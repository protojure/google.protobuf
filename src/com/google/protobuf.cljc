;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package com.google.protobuf
;;;----------------------------------------------------------------------------------
(ns com.google.protobuf
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->ListValue)
(declare ecis->ListValue)
(declare new-ListValue)
(declare cis->FeatureSet)
(declare ecis->FeatureSet)
(declare new-FeatureSet)
(declare cis->Empty)
(declare ecis->Empty)
(declare new-Empty)
(declare cis->Struct)
(declare ecis->Struct)
(declare new-Struct)
(declare cis->Api)
(declare ecis->Api)
(declare new-Api)
(declare cis->ServiceDescriptorProto)
(declare ecis->ServiceDescriptorProto)
(declare new-ServiceDescriptorProto)
(declare cis->Mixin)
(declare ecis->Mixin)
(declare new-Mixin)
(declare cis->FloatValue)
(declare ecis->FloatValue)
(declare new-FloatValue)
(declare cis->BoolValue)
(declare ecis->BoolValue)
(declare new-BoolValue)
(declare cis->DescriptorProto-ExtensionRange)
(declare ecis->DescriptorProto-ExtensionRange)
(declare new-DescriptorProto-ExtensionRange)
(declare cis->Type)
(declare ecis->Type)
(declare new-Type)
(declare cis->EnumValue)
(declare ecis->EnumValue)
(declare new-EnumValue)
(declare cis->Option)
(declare ecis->Option)
(declare new-Option)
(declare cis->Struct-FieldsEntry)
(declare ecis->Struct-FieldsEntry)
(declare new-Struct-FieldsEntry)
(declare cis->UninterpretedOption-NamePart)
(declare ecis->UninterpretedOption-NamePart)
(declare new-UninterpretedOption-NamePart)
(declare cis->FileDescriptorSet)
(declare ecis->FileDescriptorSet)
(declare new-FileDescriptorSet)
(declare cis->GeneratedCodeInfo-Annotation)
(declare ecis->GeneratedCodeInfo-Annotation)
(declare new-GeneratedCodeInfo-Annotation)
(declare cis->MethodOptions)
(declare ecis->MethodOptions)
(declare new-MethodOptions)
(declare cis->EnumDescriptorProto-EnumReservedRange)
(declare ecis->EnumDescriptorProto-EnumReservedRange)
(declare new-EnumDescriptorProto-EnumReservedRange)
(declare cis->EnumValueDescriptorProto)
(declare ecis->EnumValueDescriptorProto)
(declare new-EnumValueDescriptorProto)
(declare cis->UInt64Value)
(declare ecis->UInt64Value)
(declare new-UInt64Value)
(declare cis->SourceCodeInfo-Location)
(declare ecis->SourceCodeInfo-Location)
(declare new-SourceCodeInfo-Location)
(declare cis->FieldOptions-EditionDefault)
(declare ecis->FieldOptions-EditionDefault)
(declare new-FieldOptions-EditionDefault)
(declare cis->FieldOptions)
(declare ecis->FieldOptions)
(declare new-FieldOptions)
(declare cis->EnumOptions)
(declare ecis->EnumOptions)
(declare new-EnumOptions)
(declare cis->MessageOptions)
(declare ecis->MessageOptions)
(declare new-MessageOptions)
(declare cis->BytesValue)
(declare ecis->BytesValue)
(declare new-BytesValue)
(declare cis->Any)
(declare ecis->Any)
(declare new-Any)
(declare cis->EnumDescriptorProto)
(declare ecis->EnumDescriptorProto)
(declare new-EnumDescriptorProto)
(declare cis->FieldMask)
(declare ecis->FieldMask)
(declare new-FieldMask)
(declare cis->FeatureSetDefaults)
(declare ecis->FeatureSetDefaults)
(declare new-FeatureSetDefaults)
(declare cis->UninterpretedOption)
(declare ecis->UninterpretedOption)
(declare new-UninterpretedOption)
(declare cis->ExtensionRangeOptions)
(declare ecis->ExtensionRangeOptions)
(declare new-ExtensionRangeOptions)
(declare cis->DoubleValue)
(declare ecis->DoubleValue)
(declare new-DoubleValue)
(declare cis->Value)
(declare ecis->Value)
(declare new-Value)
(declare cis->DescriptorProto)
(declare ecis->DescriptorProto)
(declare new-DescriptorProto)
(declare cis->Method)
(declare ecis->Method)
(declare new-Method)
(declare cis->ExtensionRangeOptions-Declaration)
(declare ecis->ExtensionRangeOptions-Declaration)
(declare new-ExtensionRangeOptions-Declaration)
(declare cis->OneofOptions)
(declare ecis->OneofOptions)
(declare new-OneofOptions)
(declare cis->SourceContext)
(declare ecis->SourceContext)
(declare new-SourceContext)
(declare cis->Duration)
(declare ecis->Duration)
(declare new-Duration)
(declare cis->MethodDescriptorProto)
(declare ecis->MethodDescriptorProto)
(declare new-MethodDescriptorProto)
(declare cis->OneofDescriptorProto)
(declare ecis->OneofDescriptorProto)
(declare new-OneofDescriptorProto)
(declare cis->FileDescriptorProto)
(declare ecis->FileDescriptorProto)
(declare new-FileDescriptorProto)
(declare cis->DescriptorProto-ReservedRange)
(declare ecis->DescriptorProto-ReservedRange)
(declare new-DescriptorProto-ReservedRange)
(declare cis->Int64Value)
(declare ecis->Int64Value)
(declare new-Int64Value)
(declare cis->EnumValueOptions)
(declare ecis->EnumValueOptions)
(declare new-EnumValueOptions)
(declare cis->UInt32Value)
(declare ecis->UInt32Value)
(declare new-UInt32Value)
(declare cis->FeatureSetDefaults-FeatureSetEditionDefault)
(declare ecis->FeatureSetDefaults-FeatureSetEditionDefault)
(declare new-FeatureSetDefaults-FeatureSetEditionDefault)
(declare cis->Enum)
(declare ecis->Enum)
(declare new-Enum)
(declare cis->Timestamp)
(declare ecis->Timestamp)
(declare new-Timestamp)
(declare cis->FieldDescriptorProto)
(declare ecis->FieldDescriptorProto)
(declare new-FieldDescriptorProto)
(declare cis->GeneratedCodeInfo)
(declare ecis->GeneratedCodeInfo)
(declare new-GeneratedCodeInfo)
(declare cis->Field)
(declare ecis->Field)
(declare new-Field)
(declare cis->FileOptions)
(declare ecis->FileOptions)
(declare new-FileOptions)
(declare cis->SourceCodeInfo)
(declare ecis->SourceCodeInfo)
(declare new-SourceCodeInfo)
(declare cis->ServiceOptions)
(declare ecis->ServiceOptions)
(declare new-ServiceOptions)
(declare cis->Int32Value)
(declare ecis->Int32Value)
(declare new-Int32Value)
(declare cis->StringValue)
(declare ecis->StringValue)
(declare new-StringValue)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Enumerations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; FeatureSet-EnumType
;-----------------------------------------------------------------------------
(def FeatureSet-EnumType-default :enum-type-unknown)

(def FeatureSet-EnumType-val2label {
  0 :enum-type-unknown
  1 :open
  2 :closed})

(def FeatureSet-EnumType-label2val (set/map-invert FeatureSet-EnumType-val2label))

(defn cis->FeatureSet-EnumType [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-EnumType-val2label val val)))

(defn- get-FeatureSet-EnumType [value]
  {:pre [(or (int? value) (contains? FeatureSet-EnumType-label2val value))]}
  (get FeatureSet-EnumType-label2val value value))

(defn write-FeatureSet-EnumType
  ([tag value os] (write-FeatureSet-EnumType tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-EnumType value) os)))

;-----------------------------------------------------------------------------
; FeatureSet-Utf8Validation
;-----------------------------------------------------------------------------
(def FeatureSet-Utf8Validation-default :utf8-validation-unknown)

(def FeatureSet-Utf8Validation-val2label {
  0 :utf8-validation-unknown
  1 :unverified
  2 :verify})

(def FeatureSet-Utf8Validation-label2val (set/map-invert FeatureSet-Utf8Validation-val2label))

(defn cis->FeatureSet-Utf8Validation [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-Utf8Validation-val2label val val)))

(defn- get-FeatureSet-Utf8Validation [value]
  {:pre [(or (int? value) (contains? FeatureSet-Utf8Validation-label2val value))]}
  (get FeatureSet-Utf8Validation-label2val value value))

(defn write-FeatureSet-Utf8Validation
  ([tag value os] (write-FeatureSet-Utf8Validation tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-Utf8Validation value) os)))

;-----------------------------------------------------------------------------
; FieldOptions-OptionRetention
;-----------------------------------------------------------------------------
(def FieldOptions-OptionRetention-default :retention-unknown)

(def FieldOptions-OptionRetention-val2label {
  0 :retention-unknown
  1 :retention-runtime
  2 :retention-source})

(def FieldOptions-OptionRetention-label2val (set/map-invert FieldOptions-OptionRetention-val2label))

(defn cis->FieldOptions-OptionRetention [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldOptions-OptionRetention-val2label val val)))

(defn- get-FieldOptions-OptionRetention [value]
  {:pre [(or (int? value) (contains? FieldOptions-OptionRetention-label2val value))]}
  (get FieldOptions-OptionRetention-label2val value value))

(defn write-FieldOptions-OptionRetention
  ([tag value os] (write-FieldOptions-OptionRetention tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldOptions-OptionRetention value) os)))

;-----------------------------------------------------------------------------
; FeatureSet-FieldPresence
;-----------------------------------------------------------------------------
(def FeatureSet-FieldPresence-default :field-presence-unknown)

(def FeatureSet-FieldPresence-val2label {
  0 :field-presence-unknown
  1 :explicit
  2 :implicit
  3 :legacy-required})

(def FeatureSet-FieldPresence-label2val (set/map-invert FeatureSet-FieldPresence-val2label))

(defn cis->FeatureSet-FieldPresence [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-FieldPresence-val2label val val)))

(defn- get-FeatureSet-FieldPresence [value]
  {:pre [(or (int? value) (contains? FeatureSet-FieldPresence-label2val value))]}
  (get FeatureSet-FieldPresence-label2val value value))

(defn write-FeatureSet-FieldPresence
  ([tag value os] (write-FeatureSet-FieldPresence tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-FieldPresence value) os)))

;-----------------------------------------------------------------------------
; FeatureSet-RepeatedFieldEncoding
;-----------------------------------------------------------------------------
(def FeatureSet-RepeatedFieldEncoding-default :repeated-field-encoding-unknown)

(def FeatureSet-RepeatedFieldEncoding-val2label {
  0 :repeated-field-encoding-unknown
  1 :packed
  2 :expanded})

(def FeatureSet-RepeatedFieldEncoding-label2val (set/map-invert FeatureSet-RepeatedFieldEncoding-val2label))

(defn cis->FeatureSet-RepeatedFieldEncoding [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-RepeatedFieldEncoding-val2label val val)))

(defn- get-FeatureSet-RepeatedFieldEncoding [value]
  {:pre [(or (int? value) (contains? FeatureSet-RepeatedFieldEncoding-label2val value))]}
  (get FeatureSet-RepeatedFieldEncoding-label2val value value))

(defn write-FeatureSet-RepeatedFieldEncoding
  ([tag value os] (write-FeatureSet-RepeatedFieldEncoding tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-RepeatedFieldEncoding value) os)))

;-----------------------------------------------------------------------------
; FileOptions-OptimizeMode
;-----------------------------------------------------------------------------
(def FileOptions-OptimizeMode-default :speed)

(def FileOptions-OptimizeMode-val2label {
  1 :speed
  2 :code-size
  3 :lite-runtime})

(def FileOptions-OptimizeMode-label2val (set/map-invert FileOptions-OptimizeMode-val2label))

(defn cis->FileOptions-OptimizeMode [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FileOptions-OptimizeMode-val2label val val)))

(defn- get-FileOptions-OptimizeMode [value]
  {:pre [(or (int? value) (contains? FileOptions-OptimizeMode-label2val value))]}
  (get FileOptions-OptimizeMode-label2val value value))

(defn write-FileOptions-OptimizeMode
  ([tag value os] (write-FileOptions-OptimizeMode tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FileOptions-OptimizeMode value) os)))

;-----------------------------------------------------------------------------
; FeatureSet-JsonFormat
;-----------------------------------------------------------------------------
(def FeatureSet-JsonFormat-default :json-format-unknown)

(def FeatureSet-JsonFormat-val2label {
  0 :json-format-unknown
  1 :allow
  2 :legacy-best-effort})

(def FeatureSet-JsonFormat-label2val (set/map-invert FeatureSet-JsonFormat-val2label))

(defn cis->FeatureSet-JsonFormat [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-JsonFormat-val2label val val)))

(defn- get-FeatureSet-JsonFormat [value]
  {:pre [(or (int? value) (contains? FeatureSet-JsonFormat-label2val value))]}
  (get FeatureSet-JsonFormat-label2val value value))

(defn write-FeatureSet-JsonFormat
  ([tag value os] (write-FeatureSet-JsonFormat tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-JsonFormat value) os)))

;-----------------------------------------------------------------------------
; Edition
;-----------------------------------------------------------------------------
(def Edition-default :edition-proto2)

(def Edition-val2label {
  998 :edition-proto2
  99997 :edition-99997-test-only
  999 :edition-proto3
  1000 :edition-2023
  99998 :edition-99998-test-only
  1 :edition-1-test-only
  0 :edition-unknown
  2 :edition-2-test-only
  99999 :edition-99999-test-only})

(def Edition-label2val (set/map-invert Edition-val2label))

(defn cis->Edition [is]
  (let [val (serdes.core/cis->Enum is)]
    (get Edition-val2label val val)))

(defn- get-Edition [value]
  {:pre [(or (int? value) (contains? Edition-label2val value))]}
  (get Edition-label2val value value))

(defn write-Edition
  ([tag value os] (write-Edition tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-Edition value) os)))

;-----------------------------------------------------------------------------
; FieldOptions-OptionTargetType
;-----------------------------------------------------------------------------
(def FieldOptions-OptionTargetType-default :target-type-method)

(def FieldOptions-OptionTargetType-val2label {
  9 :target-type-method
  3 :target-type-message
  4 :target-type-field
  8 :target-type-service
  7 :target-type-enum-entry
  5 :target-type-oneof
  6 :target-type-enum
  1 :target-type-file
  0 :target-type-unknown
  2 :target-type-extension-range})

(def FieldOptions-OptionTargetType-label2val (set/map-invert FieldOptions-OptionTargetType-val2label))

(defn cis->FieldOptions-OptionTargetType [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldOptions-OptionTargetType-val2label val val)))

(defn- get-FieldOptions-OptionTargetType [value]
  {:pre [(or (int? value) (contains? FieldOptions-OptionTargetType-label2val value))]}
  (get FieldOptions-OptionTargetType-label2val value value))

(defn write-FieldOptions-OptionTargetType
  ([tag value os] (write-FieldOptions-OptionTargetType tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldOptions-OptionTargetType value) os)))

;-----------------------------------------------------------------------------
; FieldDescriptorProto-Type
;-----------------------------------------------------------------------------
(def FieldDescriptorProto-Type-default :type-string)

(def FieldDescriptorProto-Type-val2label {
  9 :type-string
  3 :type-int64
  4 :type-uint64
  8 :type-bool
  14 :type-enum
  17 :type-sint32
  15 :type-sfixed32
  7 :type-fixed32
  5 :type-int32
  18 :type-sint64
  12 :type-bytes
  13 :type-uint32
  6 :type-fixed64
  1 :type-double
  11 :type-message
  2 :type-float
  16 :type-sfixed64
  10 :type-group})

(def FieldDescriptorProto-Type-label2val (set/map-invert FieldDescriptorProto-Type-val2label))

(defn cis->FieldDescriptorProto-Type [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldDescriptorProto-Type-val2label val val)))

(defn- get-FieldDescriptorProto-Type [value]
  {:pre [(or (int? value) (contains? FieldDescriptorProto-Type-label2val value))]}
  (get FieldDescriptorProto-Type-label2val value value))

(defn write-FieldDescriptorProto-Type
  ([tag value os] (write-FieldDescriptorProto-Type tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldDescriptorProto-Type value) os)))

;-----------------------------------------------------------------------------
; Field-Kind
;-----------------------------------------------------------------------------
(def Field-Kind-default :type-string)

(def Field-Kind-val2label {
  9 :type-string
  3 :type-int64
  4 :type-uint64
  8 :type-bool
  14 :type-enum
  17 :type-sint32
  15 :type-sfixed32
  7 :type-fixed32
  5 :type-int32
  18 :type-sint64
  12 :type-bytes
  13 :type-uint32
  6 :type-fixed64
  1 :type-double
  0 :type-unknown
  11 :type-message
  2 :type-float
  16 :type-sfixed64
  10 :type-group})

(def Field-Kind-label2val (set/map-invert Field-Kind-val2label))

(defn cis->Field-Kind [is]
  (let [val (serdes.core/cis->Enum is)]
    (get Field-Kind-val2label val val)))

(defn- get-Field-Kind [value]
  {:pre [(or (int? value) (contains? Field-Kind-label2val value))]}
  (get Field-Kind-label2val value value))

(defn write-Field-Kind
  ([tag value os] (write-Field-Kind tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-Field-Kind value) os)))

;-----------------------------------------------------------------------------
; ExtensionRangeOptions-VerificationState
;-----------------------------------------------------------------------------
(def ExtensionRangeOptions-VerificationState-default :declaration)

(def ExtensionRangeOptions-VerificationState-val2label {
  0 :declaration
  1 :unverified})

(def ExtensionRangeOptions-VerificationState-label2val (set/map-invert ExtensionRangeOptions-VerificationState-val2label))

(defn cis->ExtensionRangeOptions-VerificationState [is]
  (let [val (serdes.core/cis->Enum is)]
    (get ExtensionRangeOptions-VerificationState-val2label val val)))

(defn- get-ExtensionRangeOptions-VerificationState [value]
  {:pre [(or (int? value) (contains? ExtensionRangeOptions-VerificationState-label2val value))]}
  (get ExtensionRangeOptions-VerificationState-label2val value value))

(defn write-ExtensionRangeOptions-VerificationState
  ([tag value os] (write-ExtensionRangeOptions-VerificationState tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-ExtensionRangeOptions-VerificationState value) os)))

;-----------------------------------------------------------------------------
; NullValue
;-----------------------------------------------------------------------------
(def NullValue-default :null-value)

(def NullValue-val2label {
  0 :null-value})

(def NullValue-label2val (set/map-invert NullValue-val2label))

(defn cis->NullValue [is]
  (let [val (serdes.core/cis->Enum is)]
    (get NullValue-val2label val val)))

(defn- get-NullValue [value]
  {:pre [(or (int? value) (contains? NullValue-label2val value))]}
  (get NullValue-label2val value value))

(defn write-NullValue
  ([tag value os] (write-NullValue tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-NullValue value) os)))

;-----------------------------------------------------------------------------
; FeatureSet-MessageEncoding
;-----------------------------------------------------------------------------
(def FeatureSet-MessageEncoding-default :message-encoding-unknown)

(def FeatureSet-MessageEncoding-val2label {
  0 :message-encoding-unknown
  1 :length-prefixed
  2 :delimited})

(def FeatureSet-MessageEncoding-label2val (set/map-invert FeatureSet-MessageEncoding-val2label))

(defn cis->FeatureSet-MessageEncoding [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FeatureSet-MessageEncoding-val2label val val)))

(defn- get-FeatureSet-MessageEncoding [value]
  {:pre [(or (int? value) (contains? FeatureSet-MessageEncoding-label2val value))]}
  (get FeatureSet-MessageEncoding-label2val value value))

(defn write-FeatureSet-MessageEncoding
  ([tag value os] (write-FeatureSet-MessageEncoding tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FeatureSet-MessageEncoding value) os)))

;-----------------------------------------------------------------------------
; Field-Cardinality
;-----------------------------------------------------------------------------
(def Field-Cardinality-default :cardinality-unknown)

(def Field-Cardinality-val2label {
  0 :cardinality-unknown
  1 :cardinality-optional
  2 :cardinality-required
  3 :cardinality-repeated})

(def Field-Cardinality-label2val (set/map-invert Field-Cardinality-val2label))

(defn cis->Field-Cardinality [is]
  (let [val (serdes.core/cis->Enum is)]
    (get Field-Cardinality-val2label val val)))

(defn- get-Field-Cardinality [value]
  {:pre [(or (int? value) (contains? Field-Cardinality-label2val value))]}
  (get Field-Cardinality-label2val value value))

(defn write-Field-Cardinality
  ([tag value os] (write-Field-Cardinality tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-Field-Cardinality value) os)))

;-----------------------------------------------------------------------------
; Syntax
;-----------------------------------------------------------------------------
(def Syntax-default :syntax-proto2)

(def Syntax-val2label {
  0 :syntax-proto2
  1 :syntax-proto3
  2 :syntax-editions})

(def Syntax-label2val (set/map-invert Syntax-val2label))

(defn cis->Syntax [is]
  (let [val (serdes.core/cis->Enum is)]
    (get Syntax-val2label val val)))

(defn- get-Syntax [value]
  {:pre [(or (int? value) (contains? Syntax-label2val value))]}
  (get Syntax-label2val value value))

(defn write-Syntax
  ([tag value os] (write-Syntax tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-Syntax value) os)))

;-----------------------------------------------------------------------------
; FieldOptions-JSType
;-----------------------------------------------------------------------------
(def FieldOptions-JSType-default :js-normal)

(def FieldOptions-JSType-val2label {
  0 :js-normal
  1 :js-string
  2 :js-number})

(def FieldOptions-JSType-label2val (set/map-invert FieldOptions-JSType-val2label))

(defn cis->FieldOptions-JSType [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldOptions-JSType-val2label val val)))

(defn- get-FieldOptions-JSType [value]
  {:pre [(or (int? value) (contains? FieldOptions-JSType-label2val value))]}
  (get FieldOptions-JSType-label2val value value))

(defn write-FieldOptions-JSType
  ([tag value os] (write-FieldOptions-JSType tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldOptions-JSType value) os)))

;-----------------------------------------------------------------------------
; FieldDescriptorProto-Label
;-----------------------------------------------------------------------------
(def FieldDescriptorProto-Label-default :label-optional)

(def FieldDescriptorProto-Label-val2label {
  1 :label-optional
  2 :label-required
  3 :label-repeated})

(def FieldDescriptorProto-Label-label2val (set/map-invert FieldDescriptorProto-Label-val2label))

(defn cis->FieldDescriptorProto-Label [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldDescriptorProto-Label-val2label val val)))

(defn- get-FieldDescriptorProto-Label [value]
  {:pre [(or (int? value) (contains? FieldDescriptorProto-Label-label2val value))]}
  (get FieldDescriptorProto-Label-label2val value value))

(defn write-FieldDescriptorProto-Label
  ([tag value os] (write-FieldDescriptorProto-Label tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldDescriptorProto-Label value) os)))

;-----------------------------------------------------------------------------
; FieldOptions-CType
;-----------------------------------------------------------------------------
(def FieldOptions-CType-default :string)

(def FieldOptions-CType-val2label {
  0 :string
  1 :cord
  2 :string-piece})

(def FieldOptions-CType-label2val (set/map-invert FieldOptions-CType-val2label))

(defn cis->FieldOptions-CType [is]
  (let [val (serdes.core/cis->Enum is)]
    (get FieldOptions-CType-val2label val val)))

(defn- get-FieldOptions-CType [value]
  {:pre [(or (int? value) (contains? FieldOptions-CType-label2val value))]}
  (get FieldOptions-CType-label2val value value))

(defn write-FieldOptions-CType
  ([tag value os] (write-FieldOptions-CType tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-FieldOptions-CType value) os)))

;-----------------------------------------------------------------------------
; MethodOptions-IdempotencyLevel
;-----------------------------------------------------------------------------
(def MethodOptions-IdempotencyLevel-default :idempotency-unknown)

(def MethodOptions-IdempotencyLevel-val2label {
  0 :idempotency-unknown
  1 :no-side-effects
  2 :idempotent})

(def MethodOptions-IdempotencyLevel-label2val (set/map-invert MethodOptions-IdempotencyLevel-val2label))

(defn cis->MethodOptions-IdempotencyLevel [is]
  (let [val (serdes.core/cis->Enum is)]
    (get MethodOptions-IdempotencyLevel-val2label val val)))

(defn- get-MethodOptions-IdempotencyLevel [value]
  {:pre [(or (int? value) (contains? MethodOptions-IdempotencyLevel-label2val value))]}
  (get MethodOptions-IdempotencyLevel-label2val value value))

(defn write-MethodOptions-IdempotencyLevel
  ([tag value os] (write-MethodOptions-IdempotencyLevel tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-MethodOptions-IdempotencyLevel value) os)))

;-----------------------------------------------------------------------------
; GeneratedCodeInfo-Annotation-Semantic
;-----------------------------------------------------------------------------
(def GeneratedCodeInfo-Annotation-Semantic-default :none)

(def GeneratedCodeInfo-Annotation-Semantic-val2label {
  0 :none
  1 :set
  2 :alias})

(def GeneratedCodeInfo-Annotation-Semantic-label2val (set/map-invert GeneratedCodeInfo-Annotation-Semantic-val2label))

(defn cis->GeneratedCodeInfo-Annotation-Semantic [is]
  (let [val (serdes.core/cis->Enum is)]
    (get GeneratedCodeInfo-Annotation-Semantic-val2label val val)))

(defn- get-GeneratedCodeInfo-Annotation-Semantic [value]
  {:pre [(or (int? value) (contains? GeneratedCodeInfo-Annotation-Semantic-label2val value))]}
  (get GeneratedCodeInfo-Annotation-Semantic-label2val value value))

(defn write-GeneratedCodeInfo-Annotation-Semantic
  ([tag value os] (write-GeneratedCodeInfo-Annotation-Semantic tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-GeneratedCodeInfo-Annotation-Semantic value) os)))


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Value-kind's oneof Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(defn convert-Value-kind [origkeyval]
  (cond
     (get-in origkeyval [:kind :null-value]) origkeyval
     (get-in origkeyval [:kind :number-value]) origkeyval
     (get-in origkeyval [:kind :string-value]) origkeyval
     (get-in origkeyval [:kind :bool-value]) origkeyval
     (get-in origkeyval [:kind :struct-value]) (update-in origkeyval [:kind :struct-value] new-Struct)
     (get-in origkeyval [:kind :list-value]) (update-in origkeyval [:kind :list-value] new-ListValue)
     :default origkeyval))

(defn write-Value-kind [kind os]
  (let [field (first kind)
        k (when-not (nil? field) (key field))
        v (when-not (nil? field) (val field))]
     (case k
         :null-value (write-NullValue 1  {:optimize false} v os)
         :number-value (serdes.core/write-Double 2  {:optimize false} v os)
         :string-value (serdes.core/write-String 3  {:optimize false} v os)
         :bool-value (serdes.core/write-Bool 4  {:optimize false} v os)
         :struct-value (serdes.core/write-embedded 5 v os)
         :list-value (serdes.core/write-embedded 6 v os)
         nil)))



;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; ListValue
;-----------------------------------------------------------------------------
(defrecord ListValue-record [values]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:values this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.ListValue"))

(s/def ::ListValue-spec (s/keys :opt-un []))
(def ListValue-defaults {:values [] })

(defn cis->ListValue
  "CodedInputStream to ListValue"
  [is]
  (->> (tag-map ListValue-defaults
         (fn [tag index]
             (case index
               1 [:values (serdes.complex/cis->repeated ecis->Value is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ListValue-record)))

(defn ecis->ListValue
  "Embedded CodedInputStream to ListValue"
  [is]
  (serdes.core/cis->embedded cis->ListValue is))

(defn new-ListValue
  "Creates a new instance from a map, similar to map->ListValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ListValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ListValue-spec init))))]}
  (-> (merge ListValue-defaults init)
      (cond-> (some? (get init :values)) (update :values #(map new-Value %)))
      (map->ListValue-record)))

(defn pb->ListValue
  "Protobuf to ListValue"
  [input]
  (cis->ListValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ListValue-meta {:type "com.google.protobuf.ListValue" :decoder pb->ListValue})

;-----------------------------------------------------------------------------
; FeatureSet
;-----------------------------------------------------------------------------
(defrecord FeatureSet-record [field-presence enum-type repeated-field-encoding utf8-validation message-encoding json-format]
  pb/Writer
  (serialize [this os]
    (write-FeatureSet-FieldPresence 1  {:optimize true} (:field-presence this) os)
    (write-FeatureSet-EnumType 2  {:optimize true} (:enum-type this) os)
    (write-FeatureSet-RepeatedFieldEncoding 3  {:optimize true} (:repeated-field-encoding this) os)
    (write-FeatureSet-Utf8Validation 4  {:optimize true} (:utf8-validation this) os)
    (write-FeatureSet-MessageEncoding 5  {:optimize true} (:message-encoding this) os)
    (write-FeatureSet-JsonFormat 6  {:optimize true} (:json-format this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FeatureSet"))

(s/def :com.google.protobuf.FeatureSet/field-presence (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSet/enum-type (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSet/repeated-field-encoding (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSet/utf8-validation (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSet/message-encoding (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSet/json-format (s/or :keyword keyword? :int int?))
(s/def ::FeatureSet-spec (s/keys :opt-un [:com.google.protobuf.FeatureSet/field-presence :com.google.protobuf.FeatureSet/enum-type :com.google.protobuf.FeatureSet/repeated-field-encoding :com.google.protobuf.FeatureSet/utf8-validation :com.google.protobuf.FeatureSet/message-encoding :com.google.protobuf.FeatureSet/json-format ]))
(def FeatureSet-defaults {:field-presence FeatureSet-FieldPresence-default :enum-type FeatureSet-EnumType-default :repeated-field-encoding FeatureSet-RepeatedFieldEncoding-default :utf8-validation FeatureSet-Utf8Validation-default :message-encoding FeatureSet-MessageEncoding-default :json-format FeatureSet-JsonFormat-default })

(defn cis->FeatureSet
  "CodedInputStream to FeatureSet"
  [is]
  (->> (tag-map FeatureSet-defaults
         (fn [tag index]
             (case index
               1 [:field-presence (cis->FeatureSet-FieldPresence is)]
               2 [:enum-type (cis->FeatureSet-EnumType is)]
               3 [:repeated-field-encoding (cis->FeatureSet-RepeatedFieldEncoding is)]
               4 [:utf8-validation (cis->FeatureSet-Utf8Validation is)]
               5 [:message-encoding (cis->FeatureSet-MessageEncoding is)]
               6 [:json-format (cis->FeatureSet-JsonFormat is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FeatureSet-record)))

(defn ecis->FeatureSet
  "Embedded CodedInputStream to FeatureSet"
  [is]
  (serdes.core/cis->embedded cis->FeatureSet is))

(defn new-FeatureSet
  "Creates a new instance from a map, similar to map->FeatureSet except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FeatureSet-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FeatureSet-spec init))))]}
  (-> (merge FeatureSet-defaults init)
      (map->FeatureSet-record)))

(defn pb->FeatureSet
  "Protobuf to FeatureSet"
  [input]
  (cis->FeatureSet (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FeatureSet-meta {:type "com.google.protobuf.FeatureSet" :decoder pb->FeatureSet})

;-----------------------------------------------------------------------------
; Empty
;-----------------------------------------------------------------------------
(defrecord Empty-record []
  pb/Writer
  (serialize [this os]
)
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Empty"))

(s/def ::Empty-spec (s/keys :opt-un []))
(def Empty-defaults {})

(defn cis->Empty
  "CodedInputStream to Empty"
  [is]
  (->> (tag-map Empty-defaults
         (fn [tag index]
             (case index
               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Empty-record)))

(defn ecis->Empty
  "Embedded CodedInputStream to Empty"
  [is]
  (serdes.core/cis->embedded cis->Empty is))

(defn new-Empty
  "Creates a new instance from a map, similar to map->Empty except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Empty-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Empty-spec init))))]}
  (-> (merge Empty-defaults init)
      (map->Empty-record)))

(defn pb->Empty
  "Protobuf to Empty"
  [input]
  (cis->Empty (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Empty-meta {:type "com.google.protobuf.Empty" :decoder pb->Empty})

;-----------------------------------------------------------------------------
; Struct
;-----------------------------------------------------------------------------
(defrecord Struct-record [fields]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-map new-Struct-FieldsEntry 1 (:fields this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Struct"))

(s/def ::Struct-spec (s/keys :opt-un []))
(def Struct-defaults {:fields [] })

(defn cis->Struct
  "CodedInputStream to Struct"
  [is]
  (->> (tag-map Struct-defaults
         (fn [tag index]
             (case index
               1 [:fields (serdes.complex/cis->map ecis->Struct-FieldsEntry is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Struct-record)))

(defn ecis->Struct
  "Embedded CodedInputStream to Struct"
  [is]
  (serdes.core/cis->embedded cis->Struct is))

(defn new-Struct
  "Creates a new instance from a map, similar to map->Struct except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Struct-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Struct-spec init))))]}
  (-> (merge Struct-defaults init)
      (map->Struct-record)))

(defn pb->Struct
  "Protobuf to Struct"
  [input]
  (cis->Struct (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Struct-meta {:type "com.google.protobuf.Struct" :decoder pb->Struct})

;-----------------------------------------------------------------------------
; Api
;-----------------------------------------------------------------------------
(defrecord Api-record [name methods options version source-context mixins syntax]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:methods this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 3 (:options this) os)
    (serdes.core/write-String 4  {:optimize true} (:version this) os)
    (serdes.core/write-embedded 5 (:source-context this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 6 (:mixins this) os)
    (write-Syntax 7  {:optimize true} (:syntax this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Api"))

(s/def :com.google.protobuf.Api/name string?)


(s/def :com.google.protobuf.Api/version string?)


(s/def :com.google.protobuf.Api/syntax (s/or :keyword keyword? :int int?))
(s/def ::Api-spec (s/keys :opt-un [:com.google.protobuf.Api/name :com.google.protobuf.Api/version :com.google.protobuf.Api/syntax ]))
(def Api-defaults {:name "" :methods [] :options [] :version "" :mixins [] :syntax Syntax-default })

(defn cis->Api
  "CodedInputStream to Api"
  [is]
  (->> (tag-map Api-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:methods (serdes.complex/cis->repeated ecis->Method is)]
               3 [:options (serdes.complex/cis->repeated ecis->Option is)]
               4 [:version (serdes.core/cis->String is)]
               5 [:source-context (ecis->SourceContext is)]
               6 [:mixins (serdes.complex/cis->repeated ecis->Mixin is)]
               7 [:syntax (cis->Syntax is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Api-record)))

(defn ecis->Api
  "Embedded CodedInputStream to Api"
  [is]
  (serdes.core/cis->embedded cis->Api is))

(defn new-Api
  "Creates a new instance from a map, similar to map->Api except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Api-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Api-spec init))))]}
  (-> (merge Api-defaults init)
      (cond-> (some? (get init :methods)) (update :methods #(map new-Method %)))
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (cond-> (some? (get init :source-context)) (update :source-context new-SourceContext))
      (cond-> (some? (get init :mixins)) (update :mixins #(map new-Mixin %)))
      (map->Api-record)))

(defn pb->Api
  "Protobuf to Api"
  [input]
  (cis->Api (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Api-meta {:type "com.google.protobuf.Api" :decoder pb->Api})

;-----------------------------------------------------------------------------
; ServiceDescriptorProto
;-----------------------------------------------------------------------------
(defrecord ServiceDescriptorProto-record [name method options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:method this) os)
    (serdes.core/write-embedded 3 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.ServiceDescriptorProto"))

(s/def :com.google.protobuf.ServiceDescriptorProto/name string?)


(s/def ::ServiceDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.ServiceDescriptorProto/name ]))
(def ServiceDescriptorProto-defaults {:name "" :method [] })

(defn cis->ServiceDescriptorProto
  "CodedInputStream to ServiceDescriptorProto"
  [is]
  (->> (tag-map ServiceDescriptorProto-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:method (serdes.complex/cis->repeated ecis->MethodDescriptorProto is)]
               3 [:options (ecis->ServiceOptions is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ServiceDescriptorProto-record)))

(defn ecis->ServiceDescriptorProto
  "Embedded CodedInputStream to ServiceDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->ServiceDescriptorProto is))

(defn new-ServiceDescriptorProto
  "Creates a new instance from a map, similar to map->ServiceDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ServiceDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ServiceDescriptorProto-spec init))))]}
  (-> (merge ServiceDescriptorProto-defaults init)
      (cond-> (some? (get init :method)) (update :method #(map new-MethodDescriptorProto %)))
      (cond-> (some? (get init :options)) (update :options new-ServiceOptions))
      (map->ServiceDescriptorProto-record)))

(defn pb->ServiceDescriptorProto
  "Protobuf to ServiceDescriptorProto"
  [input]
  (cis->ServiceDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ServiceDescriptorProto-meta {:type "com.google.protobuf.ServiceDescriptorProto" :decoder pb->ServiceDescriptorProto})

;-----------------------------------------------------------------------------
; Mixin
;-----------------------------------------------------------------------------
(defrecord Mixin-record [name root]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-String 2  {:optimize true} (:root this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Mixin"))

(s/def :com.google.protobuf.Mixin/name string?)
(s/def :com.google.protobuf.Mixin/root string?)
(s/def ::Mixin-spec (s/keys :opt-un [:com.google.protobuf.Mixin/name :com.google.protobuf.Mixin/root ]))
(def Mixin-defaults {:name "" :root "" })

(defn cis->Mixin
  "CodedInputStream to Mixin"
  [is]
  (->> (tag-map Mixin-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:root (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Mixin-record)))

(defn ecis->Mixin
  "Embedded CodedInputStream to Mixin"
  [is]
  (serdes.core/cis->embedded cis->Mixin is))

(defn new-Mixin
  "Creates a new instance from a map, similar to map->Mixin except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Mixin-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Mixin-spec init))))]}
  (-> (merge Mixin-defaults init)
      (map->Mixin-record)))

(defn pb->Mixin
  "Protobuf to Mixin"
  [input]
  (cis->Mixin (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Mixin-meta {:type "com.google.protobuf.Mixin" :decoder pb->Mixin})

;-----------------------------------------------------------------------------
; FloatValue
;-----------------------------------------------------------------------------
(defrecord FloatValue-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Float 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FloatValue"))

(s/def :com.google.protobuf.FloatValue/value float?)
(s/def ::FloatValue-spec (s/keys :opt-un [:com.google.protobuf.FloatValue/value ]))
(def FloatValue-defaults {:value 0.0 })

(defn cis->FloatValue
  "CodedInputStream to FloatValue"
  [is]
  (->> (tag-map FloatValue-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Float is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FloatValue-record)))

(defn ecis->FloatValue
  "Embedded CodedInputStream to FloatValue"
  [is]
  (serdes.core/cis->embedded cis->FloatValue is))

(defn new-FloatValue
  "Creates a new instance from a map, similar to map->FloatValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FloatValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FloatValue-spec init))))]}
  (-> (merge FloatValue-defaults init)
      (map->FloatValue-record)))

(defn pb->FloatValue
  "Protobuf to FloatValue"
  [input]
  (cis->FloatValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FloatValue-meta {:type "com.google.protobuf.FloatValue" :decoder pb->FloatValue})

;-----------------------------------------------------------------------------
; BoolValue
;-----------------------------------------------------------------------------
(defrecord BoolValue-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.BoolValue"))

(s/def :com.google.protobuf.BoolValue/value boolean?)
(s/def ::BoolValue-spec (s/keys :opt-un [:com.google.protobuf.BoolValue/value ]))
(def BoolValue-defaults {:value false })

(defn cis->BoolValue
  "CodedInputStream to BoolValue"
  [is]
  (->> (tag-map BoolValue-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->BoolValue-record)))

(defn ecis->BoolValue
  "Embedded CodedInputStream to BoolValue"
  [is]
  (serdes.core/cis->embedded cis->BoolValue is))

(defn new-BoolValue
  "Creates a new instance from a map, similar to map->BoolValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::BoolValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::BoolValue-spec init))))]}
  (-> (merge BoolValue-defaults init)
      (map->BoolValue-record)))

(defn pb->BoolValue
  "Protobuf to BoolValue"
  [input]
  (cis->BoolValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record BoolValue-meta {:type "com.google.protobuf.BoolValue" :decoder pb->BoolValue})

;-----------------------------------------------------------------------------
; DescriptorProto-ExtensionRange
;-----------------------------------------------------------------------------
(defrecord DescriptorProto-ExtensionRange-record [start end options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:start this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:end this) os)
    (serdes.core/write-embedded 3 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.DescriptorProto-ExtensionRange"))

(s/def :com.google.protobuf.DescriptorProto-ExtensionRange/start int?)
(s/def :com.google.protobuf.DescriptorProto-ExtensionRange/end int?)

(s/def ::DescriptorProto-ExtensionRange-spec (s/keys :opt-un [:com.google.protobuf.DescriptorProto-ExtensionRange/start :com.google.protobuf.DescriptorProto-ExtensionRange/end ]))
(def DescriptorProto-ExtensionRange-defaults {:start 0 :end 0 })

(defn cis->DescriptorProto-ExtensionRange
  "CodedInputStream to DescriptorProto-ExtensionRange"
  [is]
  (->> (tag-map DescriptorProto-ExtensionRange-defaults
         (fn [tag index]
             (case index
               1 [:start (serdes.core/cis->Int32 is)]
               2 [:end (serdes.core/cis->Int32 is)]
               3 [:options (ecis->ExtensionRangeOptions is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->DescriptorProto-ExtensionRange-record)))

(defn ecis->DescriptorProto-ExtensionRange
  "Embedded CodedInputStream to DescriptorProto-ExtensionRange"
  [is]
  (serdes.core/cis->embedded cis->DescriptorProto-ExtensionRange is))

(defn new-DescriptorProto-ExtensionRange
  "Creates a new instance from a map, similar to map->DescriptorProto-ExtensionRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-ExtensionRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-ExtensionRange-spec init))))]}
  (-> (merge DescriptorProto-ExtensionRange-defaults init)
      (cond-> (some? (get init :options)) (update :options new-ExtensionRangeOptions))
      (map->DescriptorProto-ExtensionRange-record)))

(defn pb->DescriptorProto-ExtensionRange
  "Protobuf to DescriptorProto-ExtensionRange"
  [input]
  (cis->DescriptorProto-ExtensionRange (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record DescriptorProto-ExtensionRange-meta {:type "com.google.protobuf.DescriptorProto-ExtensionRange" :decoder pb->DescriptorProto-ExtensionRange})

;-----------------------------------------------------------------------------
; Type
;-----------------------------------------------------------------------------
(defrecord Type-record [name fields oneofs options source-context syntax edition]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:fields this) os)
    (serdes.complex/write-repeated serdes.core/write-String 3 (:oneofs this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 4 (:options this) os)
    (serdes.core/write-embedded 5 (:source-context this) os)
    (write-Syntax 6  {:optimize true} (:syntax this) os)
    (serdes.core/write-String 7  {:optimize true} (:edition this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Type"))

(s/def :com.google.protobuf.Type/name string?)

(s/def :com.google.protobuf.Type/oneofs (s/every string?))


(s/def :com.google.protobuf.Type/syntax (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.Type/edition string?)
(s/def ::Type-spec (s/keys :opt-un [:com.google.protobuf.Type/name :com.google.protobuf.Type/oneofs :com.google.protobuf.Type/syntax :com.google.protobuf.Type/edition ]))
(def Type-defaults {:name "" :fields [] :oneofs [] :options [] :syntax Syntax-default :edition "" })

(defn cis->Type
  "CodedInputStream to Type"
  [is]
  (->> (tag-map Type-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:fields (serdes.complex/cis->repeated ecis->Field is)]
               3 [:oneofs (serdes.complex/cis->repeated serdes.core/cis->String is)]
               4 [:options (serdes.complex/cis->repeated ecis->Option is)]
               5 [:source-context (ecis->SourceContext is)]
               6 [:syntax (cis->Syntax is)]
               7 [:edition (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Type-record)))

(defn ecis->Type
  "Embedded CodedInputStream to Type"
  [is]
  (serdes.core/cis->embedded cis->Type is))

(defn new-Type
  "Creates a new instance from a map, similar to map->Type except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Type-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Type-spec init))))]}
  (-> (merge Type-defaults init)
      (cond-> (some? (get init :fields)) (update :fields #(map new-Field %)))
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (cond-> (some? (get init :source-context)) (update :source-context new-SourceContext))
      (map->Type-record)))

(defn pb->Type
  "Protobuf to Type"
  [input]
  (cis->Type (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Type-meta {:type "com.google.protobuf.Type" :decoder pb->Type})

;-----------------------------------------------------------------------------
; EnumValue
;-----------------------------------------------------------------------------
(defrecord EnumValue-record [name number options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:number this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 3 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumValue"))

(s/def :com.google.protobuf.EnumValue/name string?)
(s/def :com.google.protobuf.EnumValue/number int?)

(s/def ::EnumValue-spec (s/keys :opt-un [:com.google.protobuf.EnumValue/name :com.google.protobuf.EnumValue/number ]))
(def EnumValue-defaults {:name "" :number 0 :options [] })

(defn cis->EnumValue
  "CodedInputStream to EnumValue"
  [is]
  (->> (tag-map EnumValue-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:number (serdes.core/cis->Int32 is)]
               3 [:options (serdes.complex/cis->repeated ecis->Option is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumValue-record)))

(defn ecis->EnumValue
  "Embedded CodedInputStream to EnumValue"
  [is]
  (serdes.core/cis->embedded cis->EnumValue is))

(defn new-EnumValue
  "Creates a new instance from a map, similar to map->EnumValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumValue-spec init))))]}
  (-> (merge EnumValue-defaults init)
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (map->EnumValue-record)))

(defn pb->EnumValue
  "Protobuf to EnumValue"
  [input]
  (cis->EnumValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumValue-meta {:type "com.google.protobuf.EnumValue" :decoder pb->EnumValue})

;-----------------------------------------------------------------------------
; Option
;-----------------------------------------------------------------------------
(defrecord Option-record [name value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-embedded 2 (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Option"))

(s/def :com.google.protobuf.Option/name string?)

(s/def ::Option-spec (s/keys :opt-un [:com.google.protobuf.Option/name ]))
(def Option-defaults {:name "" })

(defn cis->Option
  "CodedInputStream to Option"
  [is]
  (->> (tag-map Option-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:value (ecis->Any is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Option-record)))

(defn ecis->Option
  "Embedded CodedInputStream to Option"
  [is]
  (serdes.core/cis->embedded cis->Option is))

(defn new-Option
  "Creates a new instance from a map, similar to map->Option except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Option-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Option-spec init))))]}
  (-> (merge Option-defaults init)
      (cond-> (some? (get init :value)) (update :value new-Any))
      (map->Option-record)))

(defn pb->Option
  "Protobuf to Option"
  [input]
  (cis->Option (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Option-meta {:type "com.google.protobuf.Option" :decoder pb->Option})

;-----------------------------------------------------------------------------
; Struct-FieldsEntry
;-----------------------------------------------------------------------------
(defrecord Struct-FieldsEntry-record [key value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:key this) os)
    (serdes.core/write-embedded 2 (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Struct-FieldsEntry"))

(s/def :com.google.protobuf.Struct-FieldsEntry/key string?)

(s/def ::Struct-FieldsEntry-spec (s/keys :opt-un [:com.google.protobuf.Struct-FieldsEntry/key ]))
(def Struct-FieldsEntry-defaults {:key "" })

(defn cis->Struct-FieldsEntry
  "CodedInputStream to Struct-FieldsEntry"
  [is]
  (->> (tag-map Struct-FieldsEntry-defaults
         (fn [tag index]
             (case index
               1 [:key (serdes.core/cis->String is)]
               2 [:value (ecis->Value is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Struct-FieldsEntry-record)))

(defn ecis->Struct-FieldsEntry
  "Embedded CodedInputStream to Struct-FieldsEntry"
  [is]
  (serdes.core/cis->embedded cis->Struct-FieldsEntry is))

(defn new-Struct-FieldsEntry
  "Creates a new instance from a map, similar to map->Struct-FieldsEntry except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Struct-FieldsEntry-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Struct-FieldsEntry-spec init))))]}
  (-> (merge Struct-FieldsEntry-defaults init)
      (cond-> (some? (get init :value)) (update :value new-Value))
      (map->Struct-FieldsEntry-record)))

(defn pb->Struct-FieldsEntry
  "Protobuf to Struct-FieldsEntry"
  [input]
  (cis->Struct-FieldsEntry (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Struct-FieldsEntry-meta {:type "com.google.protobuf.Struct-FieldsEntry" :decoder pb->Struct-FieldsEntry})

;-----------------------------------------------------------------------------
; UninterpretedOption-NamePart
;-----------------------------------------------------------------------------
(defrecord UninterpretedOption-NamePart-record [name-part is-extension]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name-part this) os)
    (serdes.core/write-Bool 2  {:optimize true} (:is-extension this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.UninterpretedOption-NamePart"))

(s/def :com.google.protobuf.UninterpretedOption-NamePart/name-part string?)
(s/def :com.google.protobuf.UninterpretedOption-NamePart/is-extension boolean?)
(s/def ::UninterpretedOption-NamePart-spec (s/keys :opt-un [:com.google.protobuf.UninterpretedOption-NamePart/name-part :com.google.protobuf.UninterpretedOption-NamePart/is-extension ]))
(def UninterpretedOption-NamePart-defaults {:name-part "" :is-extension false })

(defn cis->UninterpretedOption-NamePart
  "CodedInputStream to UninterpretedOption-NamePart"
  [is]
  (->> (tag-map UninterpretedOption-NamePart-defaults
         (fn [tag index]
             (case index
               1 [:name-part (serdes.core/cis->String is)]
               2 [:is-extension (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->UninterpretedOption-NamePart-record)))

(defn ecis->UninterpretedOption-NamePart
  "Embedded CodedInputStream to UninterpretedOption-NamePart"
  [is]
  (serdes.core/cis->embedded cis->UninterpretedOption-NamePart is))

(defn new-UninterpretedOption-NamePart
  "Creates a new instance from a map, similar to map->UninterpretedOption-NamePart except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UninterpretedOption-NamePart-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UninterpretedOption-NamePart-spec init))))]}
  (-> (merge UninterpretedOption-NamePart-defaults init)
      (map->UninterpretedOption-NamePart-record)))

(defn pb->UninterpretedOption-NamePart
  "Protobuf to UninterpretedOption-NamePart"
  [input]
  (cis->UninterpretedOption-NamePart (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record UninterpretedOption-NamePart-meta {:type "com.google.protobuf.UninterpretedOption-NamePart" :decoder pb->UninterpretedOption-NamePart})

;-----------------------------------------------------------------------------
; FileDescriptorSet
;-----------------------------------------------------------------------------
(defrecord FileDescriptorSet-record [file]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:file this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FileDescriptorSet"))

(s/def ::FileDescriptorSet-spec (s/keys :opt-un []))
(def FileDescriptorSet-defaults {:file [] })

(defn cis->FileDescriptorSet
  "CodedInputStream to FileDescriptorSet"
  [is]
  (->> (tag-map FileDescriptorSet-defaults
         (fn [tag index]
             (case index
               1 [:file (serdes.complex/cis->repeated ecis->FileDescriptorProto is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FileDescriptorSet-record)))

(defn ecis->FileDescriptorSet
  "Embedded CodedInputStream to FileDescriptorSet"
  [is]
  (serdes.core/cis->embedded cis->FileDescriptorSet is))

(defn new-FileDescriptorSet
  "Creates a new instance from a map, similar to map->FileDescriptorSet except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileDescriptorSet-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileDescriptorSet-spec init))))]}
  (-> (merge FileDescriptorSet-defaults init)
      (cond-> (some? (get init :file)) (update :file #(map new-FileDescriptorProto %)))
      (map->FileDescriptorSet-record)))

(defn pb->FileDescriptorSet
  "Protobuf to FileDescriptorSet"
  [input]
  (cis->FileDescriptorSet (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FileDescriptorSet-meta {:type "com.google.protobuf.FileDescriptorSet" :decoder pb->FileDescriptorSet})

;-----------------------------------------------------------------------------
; GeneratedCodeInfo-Annotation
;-----------------------------------------------------------------------------
(defrecord GeneratedCodeInfo-Annotation-record [path source-file begin end semantic]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-Int32 1 (:path this) os)
    (serdes.core/write-String 2  {:optimize true} (:source-file this) os)
    (serdes.core/write-Int32 3  {:optimize true} (:begin this) os)
    (serdes.core/write-Int32 4  {:optimize true} (:end this) os)
    (write-GeneratedCodeInfo-Annotation-Semantic 5  {:optimize true} (:semantic this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.GeneratedCodeInfo-Annotation"))

(s/def :com.google.protobuf.GeneratedCodeInfo-Annotation/path (s/every int?))
(s/def :com.google.protobuf.GeneratedCodeInfo-Annotation/source-file string?)
(s/def :com.google.protobuf.GeneratedCodeInfo-Annotation/begin int?)
(s/def :com.google.protobuf.GeneratedCodeInfo-Annotation/end int?)
(s/def :com.google.protobuf.GeneratedCodeInfo-Annotation/semantic (s/or :keyword keyword? :int int?))
(s/def ::GeneratedCodeInfo-Annotation-spec (s/keys :opt-un [:com.google.protobuf.GeneratedCodeInfo-Annotation/path :com.google.protobuf.GeneratedCodeInfo-Annotation/source-file :com.google.protobuf.GeneratedCodeInfo-Annotation/begin :com.google.protobuf.GeneratedCodeInfo-Annotation/end :com.google.protobuf.GeneratedCodeInfo-Annotation/semantic ]))
(def GeneratedCodeInfo-Annotation-defaults {:path [] :source-file "" :begin 0 :end 0 :semantic GeneratedCodeInfo-Annotation-Semantic-default })

(defn cis->GeneratedCodeInfo-Annotation
  "CodedInputStream to GeneratedCodeInfo-Annotation"
  [is]
  (->> (tag-map GeneratedCodeInfo-Annotation-defaults
         (fn [tag index]
             (case index
               1 [:path (serdes.complex/cis->packablerepeated tag serdes.core/cis->Int32 is)]
               2 [:source-file (serdes.core/cis->String is)]
               3 [:begin (serdes.core/cis->Int32 is)]
               4 [:end (serdes.core/cis->Int32 is)]
               5 [:semantic (cis->GeneratedCodeInfo-Annotation-Semantic is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->GeneratedCodeInfo-Annotation-record)))

(defn ecis->GeneratedCodeInfo-Annotation
  "Embedded CodedInputStream to GeneratedCodeInfo-Annotation"
  [is]
  (serdes.core/cis->embedded cis->GeneratedCodeInfo-Annotation is))

(defn new-GeneratedCodeInfo-Annotation
  "Creates a new instance from a map, similar to map->GeneratedCodeInfo-Annotation except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GeneratedCodeInfo-Annotation-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GeneratedCodeInfo-Annotation-spec init))))]}
  (-> (merge GeneratedCodeInfo-Annotation-defaults init)
      (map->GeneratedCodeInfo-Annotation-record)))

(defn pb->GeneratedCodeInfo-Annotation
  "Protobuf to GeneratedCodeInfo-Annotation"
  [input]
  (cis->GeneratedCodeInfo-Annotation (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record GeneratedCodeInfo-Annotation-meta {:type "com.google.protobuf.GeneratedCodeInfo-Annotation" :decoder pb->GeneratedCodeInfo-Annotation})

;-----------------------------------------------------------------------------
; MethodOptions
;-----------------------------------------------------------------------------
(defrecord MethodOptions-record [deprecated idempotency-level features uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 33  {:optimize true} (:deprecated this) os)
    (write-MethodOptions-IdempotencyLevel 34  {:optimize true} (:idempotency-level this) os)
    (serdes.core/write-embedded 35 (:features this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.MethodOptions"))

(s/def :com.google.protobuf.MethodOptions/deprecated boolean?)
(s/def :com.google.protobuf.MethodOptions/idempotency-level (s/or :keyword keyword? :int int?))


(s/def ::MethodOptions-spec (s/keys :opt-un [:com.google.protobuf.MethodOptions/deprecated :com.google.protobuf.MethodOptions/idempotency-level ]))
(def MethodOptions-defaults {:deprecated false :idempotency-level MethodOptions-IdempotencyLevel-default :uninterpreted-option [] })

(defn cis->MethodOptions
  "CodedInputStream to MethodOptions"
  [is]
  (->> (tag-map MethodOptions-defaults
         (fn [tag index]
             (case index
               33 [:deprecated (serdes.core/cis->Bool is)]
               34 [:idempotency-level (cis->MethodOptions-IdempotencyLevel is)]
               35 [:features (ecis->FeatureSet is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->MethodOptions-record)))

(defn ecis->MethodOptions
  "Embedded CodedInputStream to MethodOptions"
  [is]
  (serdes.core/cis->embedded cis->MethodOptions is))

(defn new-MethodOptions
  "Creates a new instance from a map, similar to map->MethodOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MethodOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MethodOptions-spec init))))]}
  (-> (merge MethodOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->MethodOptions-record)))

(defn pb->MethodOptions
  "Protobuf to MethodOptions"
  [input]
  (cis->MethodOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record MethodOptions-meta {:type "com.google.protobuf.MethodOptions" :decoder pb->MethodOptions})

;-----------------------------------------------------------------------------
; EnumDescriptorProto-EnumReservedRange
;-----------------------------------------------------------------------------
(defrecord EnumDescriptorProto-EnumReservedRange-record [start end]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:start this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:end this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumDescriptorProto-EnumReservedRange"))

(s/def :com.google.protobuf.EnumDescriptorProto-EnumReservedRange/start int?)
(s/def :com.google.protobuf.EnumDescriptorProto-EnumReservedRange/end int?)
(s/def ::EnumDescriptorProto-EnumReservedRange-spec (s/keys :opt-un [:com.google.protobuf.EnumDescriptorProto-EnumReservedRange/start :com.google.protobuf.EnumDescriptorProto-EnumReservedRange/end ]))
(def EnumDescriptorProto-EnumReservedRange-defaults {:start 0 :end 0 })

(defn cis->EnumDescriptorProto-EnumReservedRange
  "CodedInputStream to EnumDescriptorProto-EnumReservedRange"
  [is]
  (->> (tag-map EnumDescriptorProto-EnumReservedRange-defaults
         (fn [tag index]
             (case index
               1 [:start (serdes.core/cis->Int32 is)]
               2 [:end (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumDescriptorProto-EnumReservedRange-record)))

(defn ecis->EnumDescriptorProto-EnumReservedRange
  "Embedded CodedInputStream to EnumDescriptorProto-EnumReservedRange"
  [is]
  (serdes.core/cis->embedded cis->EnumDescriptorProto-EnumReservedRange is))

(defn new-EnumDescriptorProto-EnumReservedRange
  "Creates a new instance from a map, similar to map->EnumDescriptorProto-EnumReservedRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumDescriptorProto-EnumReservedRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumDescriptorProto-EnumReservedRange-spec init))))]}
  (-> (merge EnumDescriptorProto-EnumReservedRange-defaults init)
      (map->EnumDescriptorProto-EnumReservedRange-record)))

(defn pb->EnumDescriptorProto-EnumReservedRange
  "Protobuf to EnumDescriptorProto-EnumReservedRange"
  [input]
  (cis->EnumDescriptorProto-EnumReservedRange (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumDescriptorProto-EnumReservedRange-meta {:type "com.google.protobuf.EnumDescriptorProto-EnumReservedRange" :decoder pb->EnumDescriptorProto-EnumReservedRange})

;-----------------------------------------------------------------------------
; EnumValueDescriptorProto
;-----------------------------------------------------------------------------
(defrecord EnumValueDescriptorProto-record [name number options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:number this) os)
    (serdes.core/write-embedded 3 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumValueDescriptorProto"))

(s/def :com.google.protobuf.EnumValueDescriptorProto/name string?)
(s/def :com.google.protobuf.EnumValueDescriptorProto/number int?)

(s/def ::EnumValueDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.EnumValueDescriptorProto/name :com.google.protobuf.EnumValueDescriptorProto/number ]))
(def EnumValueDescriptorProto-defaults {:name "" :number 0 })

(defn cis->EnumValueDescriptorProto
  "CodedInputStream to EnumValueDescriptorProto"
  [is]
  (->> (tag-map EnumValueDescriptorProto-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:number (serdes.core/cis->Int32 is)]
               3 [:options (ecis->EnumValueOptions is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumValueDescriptorProto-record)))

(defn ecis->EnumValueDescriptorProto
  "Embedded CodedInputStream to EnumValueDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->EnumValueDescriptorProto is))

(defn new-EnumValueDescriptorProto
  "Creates a new instance from a map, similar to map->EnumValueDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumValueDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumValueDescriptorProto-spec init))))]}
  (-> (merge EnumValueDescriptorProto-defaults init)
      (cond-> (some? (get init :options)) (update :options new-EnumValueOptions))
      (map->EnumValueDescriptorProto-record)))

(defn pb->EnumValueDescriptorProto
  "Protobuf to EnumValueDescriptorProto"
  [input]
  (cis->EnumValueDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumValueDescriptorProto-meta {:type "com.google.protobuf.EnumValueDescriptorProto" :decoder pb->EnumValueDescriptorProto})

;-----------------------------------------------------------------------------
; UInt64Value
;-----------------------------------------------------------------------------
(defrecord UInt64Value-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-UInt64 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.UInt64Value"))

(s/def :com.google.protobuf.UInt64Value/value int?)
(s/def ::UInt64Value-spec (s/keys :opt-un [:com.google.protobuf.UInt64Value/value ]))
(def UInt64Value-defaults {:value 0 })

(defn cis->UInt64Value
  "CodedInputStream to UInt64Value"
  [is]
  (->> (tag-map UInt64Value-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->UInt64 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->UInt64Value-record)))

(defn ecis->UInt64Value
  "Embedded CodedInputStream to UInt64Value"
  [is]
  (serdes.core/cis->embedded cis->UInt64Value is))

(defn new-UInt64Value
  "Creates a new instance from a map, similar to map->UInt64Value except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UInt64Value-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UInt64Value-spec init))))]}
  (-> (merge UInt64Value-defaults init)
      (map->UInt64Value-record)))

(defn pb->UInt64Value
  "Protobuf to UInt64Value"
  [input]
  (cis->UInt64Value (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record UInt64Value-meta {:type "com.google.protobuf.UInt64Value" :decoder pb->UInt64Value})

;-----------------------------------------------------------------------------
; SourceCodeInfo-Location
;-----------------------------------------------------------------------------
(defrecord SourceCodeInfo-Location-record [path span leading-comments trailing-comments leading-detached-comments]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-Int32 1 (:path this) os)
    (serdes.complex/write-repeated serdes.core/write-Int32 2 (:span this) os)
    (serdes.core/write-String 3  {:optimize true} (:leading-comments this) os)
    (serdes.core/write-String 4  {:optimize true} (:trailing-comments this) os)
    (serdes.complex/write-repeated serdes.core/write-String 6 (:leading-detached-comments this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.SourceCodeInfo-Location"))

(s/def :com.google.protobuf.SourceCodeInfo-Location/path (s/every int?))
(s/def :com.google.protobuf.SourceCodeInfo-Location/span (s/every int?))
(s/def :com.google.protobuf.SourceCodeInfo-Location/leading-comments string?)
(s/def :com.google.protobuf.SourceCodeInfo-Location/trailing-comments string?)
(s/def :com.google.protobuf.SourceCodeInfo-Location/leading-detached-comments (s/every string?))
(s/def ::SourceCodeInfo-Location-spec (s/keys :opt-un [:com.google.protobuf.SourceCodeInfo-Location/path :com.google.protobuf.SourceCodeInfo-Location/span :com.google.protobuf.SourceCodeInfo-Location/leading-comments :com.google.protobuf.SourceCodeInfo-Location/trailing-comments :com.google.protobuf.SourceCodeInfo-Location/leading-detached-comments ]))
(def SourceCodeInfo-Location-defaults {:path [] :span [] :leading-comments "" :trailing-comments "" :leading-detached-comments [] })

(defn cis->SourceCodeInfo-Location
  "CodedInputStream to SourceCodeInfo-Location"
  [is]
  (->> (tag-map SourceCodeInfo-Location-defaults
         (fn [tag index]
             (case index
               1 [:path (serdes.complex/cis->packablerepeated tag serdes.core/cis->Int32 is)]
               2 [:span (serdes.complex/cis->packablerepeated tag serdes.core/cis->Int32 is)]
               3 [:leading-comments (serdes.core/cis->String is)]
               4 [:trailing-comments (serdes.core/cis->String is)]
               6 [:leading-detached-comments (serdes.complex/cis->repeated serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->SourceCodeInfo-Location-record)))

(defn ecis->SourceCodeInfo-Location
  "Embedded CodedInputStream to SourceCodeInfo-Location"
  [is]
  (serdes.core/cis->embedded cis->SourceCodeInfo-Location is))

(defn new-SourceCodeInfo-Location
  "Creates a new instance from a map, similar to map->SourceCodeInfo-Location except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SourceCodeInfo-Location-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SourceCodeInfo-Location-spec init))))]}
  (-> (merge SourceCodeInfo-Location-defaults init)
      (map->SourceCodeInfo-Location-record)))

(defn pb->SourceCodeInfo-Location
  "Protobuf to SourceCodeInfo-Location"
  [input]
  (cis->SourceCodeInfo-Location (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record SourceCodeInfo-Location-meta {:type "com.google.protobuf.SourceCodeInfo-Location" :decoder pb->SourceCodeInfo-Location})

;-----------------------------------------------------------------------------
; FieldOptions-EditionDefault
;-----------------------------------------------------------------------------
(defrecord FieldOptions-EditionDefault-record [edition value]
  pb/Writer
  (serialize [this os]
    (write-Edition 3  {:optimize true} (:edition this) os)
    (serdes.core/write-String 2  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FieldOptions-EditionDefault"))

(s/def :com.google.protobuf.FieldOptions-EditionDefault/edition (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FieldOptions-EditionDefault/value string?)
(s/def ::FieldOptions-EditionDefault-spec (s/keys :opt-un [:com.google.protobuf.FieldOptions-EditionDefault/edition :com.google.protobuf.FieldOptions-EditionDefault/value ]))
(def FieldOptions-EditionDefault-defaults {:edition Edition-default :value "" })

(defn cis->FieldOptions-EditionDefault
  "CodedInputStream to FieldOptions-EditionDefault"
  [is]
  (->> (tag-map FieldOptions-EditionDefault-defaults
         (fn [tag index]
             (case index
               3 [:edition (cis->Edition is)]
               2 [:value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FieldOptions-EditionDefault-record)))

(defn ecis->FieldOptions-EditionDefault
  "Embedded CodedInputStream to FieldOptions-EditionDefault"
  [is]
  (serdes.core/cis->embedded cis->FieldOptions-EditionDefault is))

(defn new-FieldOptions-EditionDefault
  "Creates a new instance from a map, similar to map->FieldOptions-EditionDefault except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldOptions-EditionDefault-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldOptions-EditionDefault-spec init))))]}
  (-> (merge FieldOptions-EditionDefault-defaults init)
      (map->FieldOptions-EditionDefault-record)))

(defn pb->FieldOptions-EditionDefault
  "Protobuf to FieldOptions-EditionDefault"
  [input]
  (cis->FieldOptions-EditionDefault (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FieldOptions-EditionDefault-meta {:type "com.google.protobuf.FieldOptions-EditionDefault" :decoder pb->FieldOptions-EditionDefault})

;-----------------------------------------------------------------------------
; FieldOptions
;-----------------------------------------------------------------------------
(defrecord FieldOptions-record [retention packed uninterpreted-option jstype deprecated targets edition-defaults debug-redact lazy features unverified-lazy ctype weak]
  pb/Writer
  (serialize [this os]
    (write-FieldOptions-OptionRetention 17  {:optimize true} (:retention this) os)
    (serdes.core/write-Bool 2  {:optimize true} (:packed this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os)
    (write-FieldOptions-JSType 6  {:optimize true} (:jstype this) os)
    (serdes.core/write-Bool 3  {:optimize true} (:deprecated this) os)
    (serdes.complex/write-repeated write-FieldOptions-OptionTargetType 19 (:targets this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 20 (:edition-defaults this) os)
    (serdes.core/write-Bool 16  {:optimize true} (:debug-redact this) os)
    (serdes.core/write-Bool 5  {:optimize true} (:lazy this) os)
    (serdes.core/write-embedded 21 (:features this) os)
    (serdes.core/write-Bool 15  {:optimize true} (:unverified-lazy this) os)
    (write-FieldOptions-CType 1  {:optimize true} (:ctype this) os)
    (serdes.core/write-Bool 10  {:optimize true} (:weak this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FieldOptions"))

(s/def :com.google.protobuf.FieldOptions/retention (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FieldOptions/packed boolean?)

(s/def :com.google.protobuf.FieldOptions/jstype (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FieldOptions/deprecated boolean?)
(s/def :com.google.protobuf.FieldOptions/targets (s/every (s/or :keyword keyword? :int int?)))

(s/def :com.google.protobuf.FieldOptions/debug-redact boolean?)
(s/def :com.google.protobuf.FieldOptions/lazy boolean?)

(s/def :com.google.protobuf.FieldOptions/unverified-lazy boolean?)
(s/def :com.google.protobuf.FieldOptions/ctype (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FieldOptions/weak boolean?)
(s/def ::FieldOptions-spec (s/keys :opt-un [:com.google.protobuf.FieldOptions/retention :com.google.protobuf.FieldOptions/packed :com.google.protobuf.FieldOptions/jstype :com.google.protobuf.FieldOptions/deprecated :com.google.protobuf.FieldOptions/targets :com.google.protobuf.FieldOptions/debug-redact :com.google.protobuf.FieldOptions/lazy :com.google.protobuf.FieldOptions/unverified-lazy :com.google.protobuf.FieldOptions/ctype :com.google.protobuf.FieldOptions/weak ]))
(def FieldOptions-defaults {:retention FieldOptions-OptionRetention-default :packed false :uninterpreted-option [] :jstype FieldOptions-JSType-default :deprecated false :targets [] :edition-defaults [] :debug-redact false :lazy false :unverified-lazy false :ctype FieldOptions-CType-default :weak false })

(defn cis->FieldOptions
  "CodedInputStream to FieldOptions"
  [is]
  (->> (tag-map FieldOptions-defaults
         (fn [tag index]
             (case index
               17 [:retention (cis->FieldOptions-OptionRetention is)]
               2 [:packed (serdes.core/cis->Bool is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]
               6 [:jstype (cis->FieldOptions-JSType is)]
               3 [:deprecated (serdes.core/cis->Bool is)]
               19 [:targets (serdes.complex/cis->packablerepeated tag cis->FieldOptions-OptionTargetType is)]
               20 [:edition-defaults (serdes.complex/cis->repeated ecis->FieldOptions-EditionDefault is)]
               16 [:debug-redact (serdes.core/cis->Bool is)]
               5 [:lazy (serdes.core/cis->Bool is)]
               21 [:features (ecis->FeatureSet is)]
               15 [:unverified-lazy (serdes.core/cis->Bool is)]
               1 [:ctype (cis->FieldOptions-CType is)]
               10 [:weak (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FieldOptions-record)))

(defn ecis->FieldOptions
  "Embedded CodedInputStream to FieldOptions"
  [is]
  (serdes.core/cis->embedded cis->FieldOptions is))

(defn new-FieldOptions
  "Creates a new instance from a map, similar to map->FieldOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldOptions-spec init))))]}
  (-> (merge FieldOptions-defaults init)
      (cond-> (some? (get init :edition-defaults)) (update :edition-defaults #(map new-FieldOptions-EditionDefault %)))
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->FieldOptions-record)))

(defn pb->FieldOptions
  "Protobuf to FieldOptions"
  [input]
  (cis->FieldOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FieldOptions-meta {:type "com.google.protobuf.FieldOptions" :decoder pb->FieldOptions})

;-----------------------------------------------------------------------------
; EnumOptions
;-----------------------------------------------------------------------------
(defrecord EnumOptions-record [allow-alias deprecated deprecated-legacy-json-field-conflicts features uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 2  {:optimize true} (:allow-alias this) os)
    (serdes.core/write-Bool 3  {:optimize true} (:deprecated this) os)
    (serdes.core/write-Bool 6  {:optimize true} (:deprecated-legacy-json-field-conflicts this) os)
    (serdes.core/write-embedded 7 (:features this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumOptions"))

(s/def :com.google.protobuf.EnumOptions/allow-alias boolean?)
(s/def :com.google.protobuf.EnumOptions/deprecated boolean?)
(s/def :com.google.protobuf.EnumOptions/deprecated-legacy-json-field-conflicts boolean?)


(s/def ::EnumOptions-spec (s/keys :opt-un [:com.google.protobuf.EnumOptions/allow-alias :com.google.protobuf.EnumOptions/deprecated :com.google.protobuf.EnumOptions/deprecated-legacy-json-field-conflicts ]))
(def EnumOptions-defaults {:allow-alias false :deprecated false :deprecated-legacy-json-field-conflicts false :uninterpreted-option [] })

(defn cis->EnumOptions
  "CodedInputStream to EnumOptions"
  [is]
  (->> (tag-map EnumOptions-defaults
         (fn [tag index]
             (case index
               2 [:allow-alias (serdes.core/cis->Bool is)]
               3 [:deprecated (serdes.core/cis->Bool is)]
               6 [:deprecated-legacy-json-field-conflicts (serdes.core/cis->Bool is)]
               7 [:features (ecis->FeatureSet is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumOptions-record)))

(defn ecis->EnumOptions
  "Embedded CodedInputStream to EnumOptions"
  [is]
  (serdes.core/cis->embedded cis->EnumOptions is))

(defn new-EnumOptions
  "Creates a new instance from a map, similar to map->EnumOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumOptions-spec init))))]}
  (-> (merge EnumOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->EnumOptions-record)))

(defn pb->EnumOptions
  "Protobuf to EnumOptions"
  [input]
  (cis->EnumOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumOptions-meta {:type "com.google.protobuf.EnumOptions" :decoder pb->EnumOptions})

;-----------------------------------------------------------------------------
; MessageOptions
;-----------------------------------------------------------------------------
(defrecord MessageOptions-record [message-set-wire-format no-standard-descriptor-accessor deprecated map-entry deprecated-legacy-json-field-conflicts features uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 1  {:optimize true} (:message-set-wire-format this) os)
    (serdes.core/write-Bool 2  {:optimize true} (:no-standard-descriptor-accessor this) os)
    (serdes.core/write-Bool 3  {:optimize true} (:deprecated this) os)
    (serdes.core/write-Bool 7  {:optimize true} (:map-entry this) os)
    (serdes.core/write-Bool 11  {:optimize true} (:deprecated-legacy-json-field-conflicts this) os)
    (serdes.core/write-embedded 12 (:features this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.MessageOptions"))

(s/def :com.google.protobuf.MessageOptions/message-set-wire-format boolean?)
(s/def :com.google.protobuf.MessageOptions/no-standard-descriptor-accessor boolean?)
(s/def :com.google.protobuf.MessageOptions/deprecated boolean?)
(s/def :com.google.protobuf.MessageOptions/map-entry boolean?)
(s/def :com.google.protobuf.MessageOptions/deprecated-legacy-json-field-conflicts boolean?)


(s/def ::MessageOptions-spec (s/keys :opt-un [:com.google.protobuf.MessageOptions/message-set-wire-format :com.google.protobuf.MessageOptions/no-standard-descriptor-accessor :com.google.protobuf.MessageOptions/deprecated :com.google.protobuf.MessageOptions/map-entry :com.google.protobuf.MessageOptions/deprecated-legacy-json-field-conflicts ]))
(def MessageOptions-defaults {:message-set-wire-format false :no-standard-descriptor-accessor false :deprecated false :map-entry false :deprecated-legacy-json-field-conflicts false :uninterpreted-option [] })

(defn cis->MessageOptions
  "CodedInputStream to MessageOptions"
  [is]
  (->> (tag-map MessageOptions-defaults
         (fn [tag index]
             (case index
               1 [:message-set-wire-format (serdes.core/cis->Bool is)]
               2 [:no-standard-descriptor-accessor (serdes.core/cis->Bool is)]
               3 [:deprecated (serdes.core/cis->Bool is)]
               7 [:map-entry (serdes.core/cis->Bool is)]
               11 [:deprecated-legacy-json-field-conflicts (serdes.core/cis->Bool is)]
               12 [:features (ecis->FeatureSet is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->MessageOptions-record)))

(defn ecis->MessageOptions
  "Embedded CodedInputStream to MessageOptions"
  [is]
  (serdes.core/cis->embedded cis->MessageOptions is))

(defn new-MessageOptions
  "Creates a new instance from a map, similar to map->MessageOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MessageOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MessageOptions-spec init))))]}
  (-> (merge MessageOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->MessageOptions-record)))

(defn pb->MessageOptions
  "Protobuf to MessageOptions"
  [input]
  (cis->MessageOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record MessageOptions-meta {:type "com.google.protobuf.MessageOptions" :decoder pb->MessageOptions})

;-----------------------------------------------------------------------------
; BytesValue
;-----------------------------------------------------------------------------
(defrecord BytesValue-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bytes 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.BytesValue"))

(s/def :com.google.protobuf.BytesValue/value bytes?)
(s/def ::BytesValue-spec (s/keys :opt-un [:com.google.protobuf.BytesValue/value ]))
(def BytesValue-defaults {:value (byte-array 0) })

(defn cis->BytesValue
  "CodedInputStream to BytesValue"
  [is]
  (->> (tag-map BytesValue-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->BytesValue-record)))

(defn ecis->BytesValue
  "Embedded CodedInputStream to BytesValue"
  [is]
  (serdes.core/cis->embedded cis->BytesValue is))

(defn new-BytesValue
  "Creates a new instance from a map, similar to map->BytesValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::BytesValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::BytesValue-spec init))))]}
  (-> (merge BytesValue-defaults init)
      (map->BytesValue-record)))

(defn pb->BytesValue
  "Protobuf to BytesValue"
  [input]
  (cis->BytesValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record BytesValue-meta {:type "com.google.protobuf.BytesValue" :decoder pb->BytesValue})

;-----------------------------------------------------------------------------
; Any
;-----------------------------------------------------------------------------
(defrecord Any-record [type-url value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:type-url this) os)
    (serdes.core/write-Bytes 2  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Any"))

(s/def :com.google.protobuf.Any/type-url string?)
(s/def :com.google.protobuf.Any/value bytes?)
(s/def ::Any-spec (s/keys :opt-un [:com.google.protobuf.Any/type-url :com.google.protobuf.Any/value ]))
(def Any-defaults {:type-url "" :value (byte-array 0) })

(defn cis->Any
  "CodedInputStream to Any"
  [is]
  (->> (tag-map Any-defaults
         (fn [tag index]
             (case index
               1 [:type-url (serdes.core/cis->String is)]
               2 [:value (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Any-record)))

(defn ecis->Any
  "Embedded CodedInputStream to Any"
  [is]
  (serdes.core/cis->embedded cis->Any is))

(defn new-Any
  "Creates a new instance from a map, similar to map->Any except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Any-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Any-spec init))))]}
  (-> (merge Any-defaults init)
      (map->Any-record)))

(defn pb->Any
  "Protobuf to Any"
  [input]
  (cis->Any (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Any-meta {:type "com.google.protobuf.Any" :decoder pb->Any})

;-----------------------------------------------------------------------------
; EnumDescriptorProto
;-----------------------------------------------------------------------------
(defrecord EnumDescriptorProto-record [name value options reserved-range reserved-name]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:value this) os)
    (serdes.core/write-embedded 3 (:options this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 4 (:reserved-range this) os)
    (serdes.complex/write-repeated serdes.core/write-String 5 (:reserved-name this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumDescriptorProto"))

(s/def :com.google.protobuf.EnumDescriptorProto/name string?)



(s/def :com.google.protobuf.EnumDescriptorProto/reserved-name (s/every string?))
(s/def ::EnumDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.EnumDescriptorProto/name :com.google.protobuf.EnumDescriptorProto/reserved-name ]))
(def EnumDescriptorProto-defaults {:name "" :value [] :reserved-range [] :reserved-name [] })

(defn cis->EnumDescriptorProto
  "CodedInputStream to EnumDescriptorProto"
  [is]
  (->> (tag-map EnumDescriptorProto-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:value (serdes.complex/cis->repeated ecis->EnumValueDescriptorProto is)]
               3 [:options (ecis->EnumOptions is)]
               4 [:reserved-range (serdes.complex/cis->repeated ecis->EnumDescriptorProto-EnumReservedRange is)]
               5 [:reserved-name (serdes.complex/cis->repeated serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumDescriptorProto-record)))

(defn ecis->EnumDescriptorProto
  "Embedded CodedInputStream to EnumDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->EnumDescriptorProto is))

(defn new-EnumDescriptorProto
  "Creates a new instance from a map, similar to map->EnumDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumDescriptorProto-spec init))))]}
  (-> (merge EnumDescriptorProto-defaults init)
      (cond-> (some? (get init :value)) (update :value #(map new-EnumValueDescriptorProto %)))
      (cond-> (some? (get init :options)) (update :options new-EnumOptions))
      (cond-> (some? (get init :reserved-range)) (update :reserved-range #(map new-EnumDescriptorProto-EnumReservedRange %)))
      (map->EnumDescriptorProto-record)))

(defn pb->EnumDescriptorProto
  "Protobuf to EnumDescriptorProto"
  [input]
  (cis->EnumDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumDescriptorProto-meta {:type "com.google.protobuf.EnumDescriptorProto" :decoder pb->EnumDescriptorProto})

;-----------------------------------------------------------------------------
; FieldMask
;-----------------------------------------------------------------------------
(defrecord FieldMask-record [paths]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-String 1 (:paths this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FieldMask"))

(s/def :com.google.protobuf.FieldMask/paths (s/every string?))
(s/def ::FieldMask-spec (s/keys :opt-un [:com.google.protobuf.FieldMask/paths ]))
(def FieldMask-defaults {:paths [] })

(defn cis->FieldMask
  "CodedInputStream to FieldMask"
  [is]
  (->> (tag-map FieldMask-defaults
         (fn [tag index]
             (case index
               1 [:paths (serdes.complex/cis->repeated serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FieldMask-record)))

(defn ecis->FieldMask
  "Embedded CodedInputStream to FieldMask"
  [is]
  (serdes.core/cis->embedded cis->FieldMask is))

(defn new-FieldMask
  "Creates a new instance from a map, similar to map->FieldMask except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldMask-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldMask-spec init))))]}
  (-> (merge FieldMask-defaults init)
      (map->FieldMask-record)))

(defn pb->FieldMask
  "Protobuf to FieldMask"
  [input]
  (cis->FieldMask (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FieldMask-meta {:type "com.google.protobuf.FieldMask" :decoder pb->FieldMask})

;-----------------------------------------------------------------------------
; FeatureSetDefaults
;-----------------------------------------------------------------------------
(defrecord FeatureSetDefaults-record [defaults minimum-edition maximum-edition]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:defaults this) os)
    (write-Edition 4  {:optimize true} (:minimum-edition this) os)
    (write-Edition 5  {:optimize true} (:maximum-edition this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FeatureSetDefaults"))

(s/def :com.google.protobuf.FeatureSetDefaults/minimum-edition (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FeatureSetDefaults/maximum-edition (s/or :keyword keyword? :int int?))
(s/def ::FeatureSetDefaults-spec (s/keys :opt-un [:com.google.protobuf.FeatureSetDefaults/minimum-edition :com.google.protobuf.FeatureSetDefaults/maximum-edition ]))
(def FeatureSetDefaults-defaults {:defaults [] :minimum-edition Edition-default :maximum-edition Edition-default })

(defn cis->FeatureSetDefaults
  "CodedInputStream to FeatureSetDefaults"
  [is]
  (->> (tag-map FeatureSetDefaults-defaults
         (fn [tag index]
             (case index
               1 [:defaults (serdes.complex/cis->repeated ecis->FeatureSetDefaults-FeatureSetEditionDefault is)]
               4 [:minimum-edition (cis->Edition is)]
               5 [:maximum-edition (cis->Edition is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FeatureSetDefaults-record)))

(defn ecis->FeatureSetDefaults
  "Embedded CodedInputStream to FeatureSetDefaults"
  [is]
  (serdes.core/cis->embedded cis->FeatureSetDefaults is))

(defn new-FeatureSetDefaults
  "Creates a new instance from a map, similar to map->FeatureSetDefaults except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FeatureSetDefaults-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FeatureSetDefaults-spec init))))]}
  (-> (merge FeatureSetDefaults-defaults init)
      (cond-> (some? (get init :defaults)) (update :defaults #(map new-FeatureSetDefaults-FeatureSetEditionDefault %)))
      (map->FeatureSetDefaults-record)))

(defn pb->FeatureSetDefaults
  "Protobuf to FeatureSetDefaults"
  [input]
  (cis->FeatureSetDefaults (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FeatureSetDefaults-meta {:type "com.google.protobuf.FeatureSetDefaults" :decoder pb->FeatureSetDefaults})

;-----------------------------------------------------------------------------
; UninterpretedOption
;-----------------------------------------------------------------------------
(defrecord UninterpretedOption-record [name identifier-value positive-int-value negative-int-value double-value string-value aggregate-value]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:name this) os)
    (serdes.core/write-String 3  {:optimize true} (:identifier-value this) os)
    (serdes.core/write-UInt64 4  {:optimize true} (:positive-int-value this) os)
    (serdes.core/write-Int64 5  {:optimize true} (:negative-int-value this) os)
    (serdes.core/write-Double 6  {:optimize true} (:double-value this) os)
    (serdes.core/write-Bytes 7  {:optimize true} (:string-value this) os)
    (serdes.core/write-String 8  {:optimize true} (:aggregate-value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.UninterpretedOption"))

(s/def :com.google.protobuf.UninterpretedOption/identifier-value string?)
(s/def :com.google.protobuf.UninterpretedOption/positive-int-value int?)
(s/def :com.google.protobuf.UninterpretedOption/negative-int-value int?)
(s/def :com.google.protobuf.UninterpretedOption/double-value float?)
(s/def :com.google.protobuf.UninterpretedOption/string-value bytes?)
(s/def :com.google.protobuf.UninterpretedOption/aggregate-value string?)
(s/def ::UninterpretedOption-spec (s/keys :opt-un [:com.google.protobuf.UninterpretedOption/identifier-value :com.google.protobuf.UninterpretedOption/positive-int-value :com.google.protobuf.UninterpretedOption/negative-int-value :com.google.protobuf.UninterpretedOption/double-value :com.google.protobuf.UninterpretedOption/string-value :com.google.protobuf.UninterpretedOption/aggregate-value ]))
(def UninterpretedOption-defaults {:name [] :identifier-value "" :positive-int-value 0 :negative-int-value 0 :double-value 0.0 :string-value (byte-array 0) :aggregate-value "" })

(defn cis->UninterpretedOption
  "CodedInputStream to UninterpretedOption"
  [is]
  (->> (tag-map UninterpretedOption-defaults
         (fn [tag index]
             (case index
               2 [:name (serdes.complex/cis->repeated ecis->UninterpretedOption-NamePart is)]
               3 [:identifier-value (serdes.core/cis->String is)]
               4 [:positive-int-value (serdes.core/cis->UInt64 is)]
               5 [:negative-int-value (serdes.core/cis->Int64 is)]
               6 [:double-value (serdes.core/cis->Double is)]
               7 [:string-value (serdes.core/cis->Bytes is)]
               8 [:aggregate-value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->UninterpretedOption-record)))

(defn ecis->UninterpretedOption
  "Embedded CodedInputStream to UninterpretedOption"
  [is]
  (serdes.core/cis->embedded cis->UninterpretedOption is))

(defn new-UninterpretedOption
  "Creates a new instance from a map, similar to map->UninterpretedOption except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UninterpretedOption-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UninterpretedOption-spec init))))]}
  (-> (merge UninterpretedOption-defaults init)
      (cond-> (some? (get init :name)) (update :name #(map new-UninterpretedOption-NamePart %)))
      (map->UninterpretedOption-record)))

(defn pb->UninterpretedOption
  "Protobuf to UninterpretedOption"
  [input]
  (cis->UninterpretedOption (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record UninterpretedOption-meta {:type "com.google.protobuf.UninterpretedOption" :decoder pb->UninterpretedOption})

;-----------------------------------------------------------------------------
; ExtensionRangeOptions
;-----------------------------------------------------------------------------
(defrecord ExtensionRangeOptions-record [uninterpreted-option declaration features verification]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:declaration this) os)
    (serdes.core/write-embedded 50 (:features this) os)
    (write-ExtensionRangeOptions-VerificationState 3  {:optimize true} (:verification this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.ExtensionRangeOptions"))

(s/def :com.google.protobuf.ExtensionRangeOptions/verification (s/or :keyword keyword? :int int?))
(s/def ::ExtensionRangeOptions-spec (s/keys :opt-un [:com.google.protobuf.ExtensionRangeOptions/verification ]))
(def ExtensionRangeOptions-defaults {:uninterpreted-option [] :declaration [] :verification ExtensionRangeOptions-VerificationState-default })

(defn cis->ExtensionRangeOptions
  "CodedInputStream to ExtensionRangeOptions"
  [is]
  (->> (tag-map ExtensionRangeOptions-defaults
         (fn [tag index]
             (case index
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]
               2 [:declaration (serdes.complex/cis->repeated ecis->ExtensionRangeOptions-Declaration is)]
               50 [:features (ecis->FeatureSet is)]
               3 [:verification (cis->ExtensionRangeOptions-VerificationState is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ExtensionRangeOptions-record)))

(defn ecis->ExtensionRangeOptions
  "Embedded CodedInputStream to ExtensionRangeOptions"
  [is]
  (serdes.core/cis->embedded cis->ExtensionRangeOptions is))

(defn new-ExtensionRangeOptions
  "Creates a new instance from a map, similar to map->ExtensionRangeOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ExtensionRangeOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ExtensionRangeOptions-spec init))))]}
  (-> (merge ExtensionRangeOptions-defaults init)
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (cond-> (some? (get init :declaration)) (update :declaration #(map new-ExtensionRangeOptions-Declaration %)))
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (map->ExtensionRangeOptions-record)))

(defn pb->ExtensionRangeOptions
  "Protobuf to ExtensionRangeOptions"
  [input]
  (cis->ExtensionRangeOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ExtensionRangeOptions-meta {:type "com.google.protobuf.ExtensionRangeOptions" :decoder pb->ExtensionRangeOptions})

;-----------------------------------------------------------------------------
; DoubleValue
;-----------------------------------------------------------------------------
(defrecord DoubleValue-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Double 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.DoubleValue"))

(s/def :com.google.protobuf.DoubleValue/value float?)
(s/def ::DoubleValue-spec (s/keys :opt-un [:com.google.protobuf.DoubleValue/value ]))
(def DoubleValue-defaults {:value 0.0 })

(defn cis->DoubleValue
  "CodedInputStream to DoubleValue"
  [is]
  (->> (tag-map DoubleValue-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Double is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->DoubleValue-record)))

(defn ecis->DoubleValue
  "Embedded CodedInputStream to DoubleValue"
  [is]
  (serdes.core/cis->embedded cis->DoubleValue is))

(defn new-DoubleValue
  "Creates a new instance from a map, similar to map->DoubleValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DoubleValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DoubleValue-spec init))))]}
  (-> (merge DoubleValue-defaults init)
      (map->DoubleValue-record)))

(defn pb->DoubleValue
  "Protobuf to DoubleValue"
  [input]
  (cis->DoubleValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record DoubleValue-meta {:type "com.google.protobuf.DoubleValue" :decoder pb->DoubleValue})

;-----------------------------------------------------------------------------
; Value
;-----------------------------------------------------------------------------
(defrecord Value-record [kind]
  pb/Writer
  (serialize [this os]
    (write-Value-kind  (:kind this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Value"))

(s/def ::Value-spec (s/keys :opt-un []))
(def Value-defaults {})

(defn cis->Value
  "CodedInputStream to Value"
  [is]
  (->> (tag-map Value-defaults
         (fn [tag index]
             (case index
               1 [:kind {:null-value (cis->NullValue is)}]
               2 [:kind {:number-value (serdes.core/cis->Double is)}]
               3 [:kind {:string-value (serdes.core/cis->String is)}]
               4 [:kind {:bool-value (serdes.core/cis->Bool is)}]
               5 [:kind {:struct-value (ecis->Struct is)}]
               6 [:kind {:list-value (ecis->ListValue is)}]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Value-record)))

(defn ecis->Value
  "Embedded CodedInputStream to Value"
  [is]
  (serdes.core/cis->embedded cis->Value is))

(defn new-Value
  "Creates a new instance from a map, similar to map->Value except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Value-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Value-spec init))))]}
  (-> (merge Value-defaults init)
      (convert-Value-kind)
      (map->Value-record)))

(defn pb->Value
  "Protobuf to Value"
  [input]
  (cis->Value (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Value-meta {:type "com.google.protobuf.Value" :decoder pb->Value})

;-----------------------------------------------------------------------------
; DescriptorProto
;-----------------------------------------------------------------------------
(defrecord DescriptorProto-record [reserved-range enum-type reserved-name extension-range name extension field options oneof-decl nested-type]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 9 (:reserved-range this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 4 (:enum-type this) os)
    (serdes.complex/write-repeated serdes.core/write-String 10 (:reserved-name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 5 (:extension-range this) os)
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 6 (:extension this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:field this) os)
    (serdes.core/write-embedded 7 (:options this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 8 (:oneof-decl this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 3 (:nested-type this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.DescriptorProto"))

(s/def :com.google.protobuf.DescriptorProto/reserved-name (s/every string?))

(s/def :com.google.protobuf.DescriptorProto/name string?)





(s/def ::DescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.DescriptorProto/reserved-name :com.google.protobuf.DescriptorProto/name ]))
(def DescriptorProto-defaults {:reserved-range [] :enum-type [] :reserved-name [] :extension-range [] :name "" :extension [] :field [] :oneof-decl [] :nested-type [] })

(defn cis->DescriptorProto
  "CodedInputStream to DescriptorProto"
  [is]
  (->> (tag-map DescriptorProto-defaults
         (fn [tag index]
             (case index
               9 [:reserved-range (serdes.complex/cis->repeated ecis->DescriptorProto-ReservedRange is)]
               4 [:enum-type (serdes.complex/cis->repeated ecis->EnumDescriptorProto is)]
               10 [:reserved-name (serdes.complex/cis->repeated serdes.core/cis->String is)]
               5 [:extension-range (serdes.complex/cis->repeated ecis->DescriptorProto-ExtensionRange is)]
               1 [:name (serdes.core/cis->String is)]
               6 [:extension (serdes.complex/cis->repeated ecis->FieldDescriptorProto is)]
               2 [:field (serdes.complex/cis->repeated ecis->FieldDescriptorProto is)]
               7 [:options (ecis->MessageOptions is)]
               8 [:oneof-decl (serdes.complex/cis->repeated ecis->OneofDescriptorProto is)]
               3 [:nested-type (serdes.complex/cis->repeated ecis->DescriptorProto is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->DescriptorProto-record)))

(defn ecis->DescriptorProto
  "Embedded CodedInputStream to DescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->DescriptorProto is))

(defn new-DescriptorProto
  "Creates a new instance from a map, similar to map->DescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-spec init))))]}
  (-> (merge DescriptorProto-defaults init)
      (cond-> (some? (get init :field)) (update :field #(map new-FieldDescriptorProto %)))
      (cond-> (some? (get init :extension)) (update :extension #(map new-FieldDescriptorProto %)))
      (cond-> (some? (get init :nested-type)) (update :nested-type #(map new-DescriptorProto %)))
      (cond-> (some? (get init :enum-type)) (update :enum-type #(map new-EnumDescriptorProto %)))
      (cond-> (some? (get init :extension-range)) (update :extension-range #(map new-DescriptorProto-ExtensionRange %)))
      (cond-> (some? (get init :oneof-decl)) (update :oneof-decl #(map new-OneofDescriptorProto %)))
      (cond-> (some? (get init :options)) (update :options new-MessageOptions))
      (cond-> (some? (get init :reserved-range)) (update :reserved-range #(map new-DescriptorProto-ReservedRange %)))
      (map->DescriptorProto-record)))

(defn pb->DescriptorProto
  "Protobuf to DescriptorProto"
  [input]
  (cis->DescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record DescriptorProto-meta {:type "com.google.protobuf.DescriptorProto" :decoder pb->DescriptorProto})

;-----------------------------------------------------------------------------
; Method
;-----------------------------------------------------------------------------
(defrecord Method-record [name request-type-url request-streaming response-type-url response-streaming options syntax]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-String 2  {:optimize true} (:request-type-url this) os)
    (serdes.core/write-Bool 3  {:optimize true} (:request-streaming this) os)
    (serdes.core/write-String 4  {:optimize true} (:response-type-url this) os)
    (serdes.core/write-Bool 5  {:optimize true} (:response-streaming this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 6 (:options this) os)
    (write-Syntax 7  {:optimize true} (:syntax this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Method"))

(s/def :com.google.protobuf.Method/name string?)
(s/def :com.google.protobuf.Method/request-type-url string?)
(s/def :com.google.protobuf.Method/request-streaming boolean?)
(s/def :com.google.protobuf.Method/response-type-url string?)
(s/def :com.google.protobuf.Method/response-streaming boolean?)

(s/def :com.google.protobuf.Method/syntax (s/or :keyword keyword? :int int?))
(s/def ::Method-spec (s/keys :opt-un [:com.google.protobuf.Method/name :com.google.protobuf.Method/request-type-url :com.google.protobuf.Method/request-streaming :com.google.protobuf.Method/response-type-url :com.google.protobuf.Method/response-streaming :com.google.protobuf.Method/syntax ]))
(def Method-defaults {:name "" :request-type-url "" :request-streaming false :response-type-url "" :response-streaming false :options [] :syntax Syntax-default })

(defn cis->Method
  "CodedInputStream to Method"
  [is]
  (->> (tag-map Method-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:request-type-url (serdes.core/cis->String is)]
               3 [:request-streaming (serdes.core/cis->Bool is)]
               4 [:response-type-url (serdes.core/cis->String is)]
               5 [:response-streaming (serdes.core/cis->Bool is)]
               6 [:options (serdes.complex/cis->repeated ecis->Option is)]
               7 [:syntax (cis->Syntax is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Method-record)))

(defn ecis->Method
  "Embedded CodedInputStream to Method"
  [is]
  (serdes.core/cis->embedded cis->Method is))

(defn new-Method
  "Creates a new instance from a map, similar to map->Method except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Method-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Method-spec init))))]}
  (-> (merge Method-defaults init)
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (map->Method-record)))

(defn pb->Method
  "Protobuf to Method"
  [input]
  (cis->Method (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Method-meta {:type "com.google.protobuf.Method" :decoder pb->Method})

;-----------------------------------------------------------------------------
; ExtensionRangeOptions-Declaration
;-----------------------------------------------------------------------------
(defrecord ExtensionRangeOptions-Declaration-record [number full-name type reserved repeated]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:number this) os)
    (serdes.core/write-String 2  {:optimize true} (:full-name this) os)
    (serdes.core/write-String 3  {:optimize true} (:type this) os)
    (serdes.core/write-Bool 5  {:optimize true} (:reserved this) os)
    (serdes.core/write-Bool 6  {:optimize true} (:repeated this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.ExtensionRangeOptions-Declaration"))

(s/def :com.google.protobuf.ExtensionRangeOptions-Declaration/number int?)
(s/def :com.google.protobuf.ExtensionRangeOptions-Declaration/full-name string?)
(s/def :com.google.protobuf.ExtensionRangeOptions-Declaration/type string?)
(s/def :com.google.protobuf.ExtensionRangeOptions-Declaration/reserved boolean?)
(s/def :com.google.protobuf.ExtensionRangeOptions-Declaration/repeated boolean?)
(s/def ::ExtensionRangeOptions-Declaration-spec (s/keys :opt-un [:com.google.protobuf.ExtensionRangeOptions-Declaration/number :com.google.protobuf.ExtensionRangeOptions-Declaration/full-name :com.google.protobuf.ExtensionRangeOptions-Declaration/type :com.google.protobuf.ExtensionRangeOptions-Declaration/reserved :com.google.protobuf.ExtensionRangeOptions-Declaration/repeated ]))
(def ExtensionRangeOptions-Declaration-defaults {:number 0 :full-name "" :type "" :reserved false :repeated false })

(defn cis->ExtensionRangeOptions-Declaration
  "CodedInputStream to ExtensionRangeOptions-Declaration"
  [is]
  (->> (tag-map ExtensionRangeOptions-Declaration-defaults
         (fn [tag index]
             (case index
               1 [:number (serdes.core/cis->Int32 is)]
               2 [:full-name (serdes.core/cis->String is)]
               3 [:type (serdes.core/cis->String is)]
               5 [:reserved (serdes.core/cis->Bool is)]
               6 [:repeated (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ExtensionRangeOptions-Declaration-record)))

(defn ecis->ExtensionRangeOptions-Declaration
  "Embedded CodedInputStream to ExtensionRangeOptions-Declaration"
  [is]
  (serdes.core/cis->embedded cis->ExtensionRangeOptions-Declaration is))

(defn new-ExtensionRangeOptions-Declaration
  "Creates a new instance from a map, similar to map->ExtensionRangeOptions-Declaration except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ExtensionRangeOptions-Declaration-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ExtensionRangeOptions-Declaration-spec init))))]}
  (-> (merge ExtensionRangeOptions-Declaration-defaults init)
      (map->ExtensionRangeOptions-Declaration-record)))

(defn pb->ExtensionRangeOptions-Declaration
  "Protobuf to ExtensionRangeOptions-Declaration"
  [input]
  (cis->ExtensionRangeOptions-Declaration (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ExtensionRangeOptions-Declaration-meta {:type "com.google.protobuf.ExtensionRangeOptions-Declaration" :decoder pb->ExtensionRangeOptions-Declaration})

;-----------------------------------------------------------------------------
; OneofOptions
;-----------------------------------------------------------------------------
(defrecord OneofOptions-record [features uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:features this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.OneofOptions"))

(s/def ::OneofOptions-spec (s/keys :opt-un []))
(def OneofOptions-defaults {:uninterpreted-option [] })

(defn cis->OneofOptions
  "CodedInputStream to OneofOptions"
  [is]
  (->> (tag-map OneofOptions-defaults
         (fn [tag index]
             (case index
               1 [:features (ecis->FeatureSet is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->OneofOptions-record)))

(defn ecis->OneofOptions
  "Embedded CodedInputStream to OneofOptions"
  [is]
  (serdes.core/cis->embedded cis->OneofOptions is))

(defn new-OneofOptions
  "Creates a new instance from a map, similar to map->OneofOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::OneofOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::OneofOptions-spec init))))]}
  (-> (merge OneofOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->OneofOptions-record)))

(defn pb->OneofOptions
  "Protobuf to OneofOptions"
  [input]
  (cis->OneofOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record OneofOptions-meta {:type "com.google.protobuf.OneofOptions" :decoder pb->OneofOptions})

;-----------------------------------------------------------------------------
; SourceContext
;-----------------------------------------------------------------------------
(defrecord SourceContext-record [file-name]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:file-name this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.SourceContext"))

(s/def :com.google.protobuf.SourceContext/file-name string?)
(s/def ::SourceContext-spec (s/keys :opt-un [:com.google.protobuf.SourceContext/file-name ]))
(def SourceContext-defaults {:file-name "" })

(defn cis->SourceContext
  "CodedInputStream to SourceContext"
  [is]
  (->> (tag-map SourceContext-defaults
         (fn [tag index]
             (case index
               1 [:file-name (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->SourceContext-record)))

(defn ecis->SourceContext
  "Embedded CodedInputStream to SourceContext"
  [is]
  (serdes.core/cis->embedded cis->SourceContext is))

(defn new-SourceContext
  "Creates a new instance from a map, similar to map->SourceContext except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SourceContext-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SourceContext-spec init))))]}
  (-> (merge SourceContext-defaults init)
      (map->SourceContext-record)))

(defn pb->SourceContext
  "Protobuf to SourceContext"
  [input]
  (cis->SourceContext (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record SourceContext-meta {:type "com.google.protobuf.SourceContext" :decoder pb->SourceContext})

;-----------------------------------------------------------------------------
; Duration
;-----------------------------------------------------------------------------
(defrecord Duration-record [seconds nanos]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int64 1  {:optimize true} (:seconds this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:nanos this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Duration"))

(s/def :com.google.protobuf.Duration/seconds int?)
(s/def :com.google.protobuf.Duration/nanos int?)
(s/def ::Duration-spec (s/keys :opt-un [:com.google.protobuf.Duration/seconds :com.google.protobuf.Duration/nanos ]))
(def Duration-defaults {:seconds 0 :nanos 0 })

(defn cis->Duration
  "CodedInputStream to Duration"
  [is]
  (->> (tag-map Duration-defaults
         (fn [tag index]
             (case index
               1 [:seconds (serdes.core/cis->Int64 is)]
               2 [:nanos (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Duration-record)))

(defn ecis->Duration
  "Embedded CodedInputStream to Duration"
  [is]
  (serdes.core/cis->embedded cis->Duration is))

(defn new-Duration
  "Creates a new instance from a map, similar to map->Duration except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Duration-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Duration-spec init))))]}
  (-> (merge Duration-defaults init)
      (map->Duration-record)))

(defn pb->Duration
  "Protobuf to Duration"
  [input]
  (cis->Duration (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Duration-meta {:type "com.google.protobuf.Duration" :decoder pb->Duration})

;-----------------------------------------------------------------------------
; MethodDescriptorProto
;-----------------------------------------------------------------------------
(defrecord MethodDescriptorProto-record [name input-type output-type options client-streaming server-streaming]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-String 2  {:optimize true} (:input-type this) os)
    (serdes.core/write-String 3  {:optimize true} (:output-type this) os)
    (serdes.core/write-embedded 4 (:options this) os)
    (serdes.core/write-Bool 5  {:optimize true} (:client-streaming this) os)
    (serdes.core/write-Bool 6  {:optimize true} (:server-streaming this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.MethodDescriptorProto"))

(s/def :com.google.protobuf.MethodDescriptorProto/name string?)
(s/def :com.google.protobuf.MethodDescriptorProto/input-type string?)
(s/def :com.google.protobuf.MethodDescriptorProto/output-type string?)

(s/def :com.google.protobuf.MethodDescriptorProto/client-streaming boolean?)
(s/def :com.google.protobuf.MethodDescriptorProto/server-streaming boolean?)
(s/def ::MethodDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.MethodDescriptorProto/name :com.google.protobuf.MethodDescriptorProto/input-type :com.google.protobuf.MethodDescriptorProto/output-type :com.google.protobuf.MethodDescriptorProto/client-streaming :com.google.protobuf.MethodDescriptorProto/server-streaming ]))
(def MethodDescriptorProto-defaults {:name "" :input-type "" :output-type "" :client-streaming false :server-streaming false })

(defn cis->MethodDescriptorProto
  "CodedInputStream to MethodDescriptorProto"
  [is]
  (->> (tag-map MethodDescriptorProto-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:input-type (serdes.core/cis->String is)]
               3 [:output-type (serdes.core/cis->String is)]
               4 [:options (ecis->MethodOptions is)]
               5 [:client-streaming (serdes.core/cis->Bool is)]
               6 [:server-streaming (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->MethodDescriptorProto-record)))

(defn ecis->MethodDescriptorProto
  "Embedded CodedInputStream to MethodDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->MethodDescriptorProto is))

(defn new-MethodDescriptorProto
  "Creates a new instance from a map, similar to map->MethodDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MethodDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MethodDescriptorProto-spec init))))]}
  (-> (merge MethodDescriptorProto-defaults init)
      (cond-> (some? (get init :options)) (update :options new-MethodOptions))
      (map->MethodDescriptorProto-record)))

(defn pb->MethodDescriptorProto
  "Protobuf to MethodDescriptorProto"
  [input]
  (cis->MethodDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record MethodDescriptorProto-meta {:type "com.google.protobuf.MethodDescriptorProto" :decoder pb->MethodDescriptorProto})

;-----------------------------------------------------------------------------
; OneofDescriptorProto
;-----------------------------------------------------------------------------
(defrecord OneofDescriptorProto-record [name options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-embedded 2 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.OneofDescriptorProto"))

(s/def :com.google.protobuf.OneofDescriptorProto/name string?)

(s/def ::OneofDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.OneofDescriptorProto/name ]))
(def OneofDescriptorProto-defaults {:name "" })

(defn cis->OneofDescriptorProto
  "CodedInputStream to OneofDescriptorProto"
  [is]
  (->> (tag-map OneofDescriptorProto-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:options (ecis->OneofOptions is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->OneofDescriptorProto-record)))

(defn ecis->OneofDescriptorProto
  "Embedded CodedInputStream to OneofDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->OneofDescriptorProto is))

(defn new-OneofDescriptorProto
  "Creates a new instance from a map, similar to map->OneofDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::OneofDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::OneofDescriptorProto-spec init))))]}
  (-> (merge OneofDescriptorProto-defaults init)
      (cond-> (some? (get init :options)) (update :options new-OneofOptions))
      (map->OneofDescriptorProto-record)))

(defn pb->OneofDescriptorProto
  "Protobuf to OneofDescriptorProto"
  [input]
  (cis->OneofDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record OneofDescriptorProto-meta {:type "com.google.protobuf.OneofDescriptorProto" :decoder pb->OneofDescriptorProto})

;-----------------------------------------------------------------------------
; FileDescriptorProto
;-----------------------------------------------------------------------------
(defrecord FileDescriptorProto-record [package message-type source-code-info enum-type name extension dependency edition syntax weak-dependency public-dependency service options]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 2  {:optimize true} (:package this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 4 (:message-type this) os)
    (serdes.core/write-embedded 9 (:source-code-info this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 5 (:enum-type this) os)
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 7 (:extension this) os)
    (serdes.complex/write-repeated serdes.core/write-String 3 (:dependency this) os)
    (write-Edition 14  {:optimize true} (:edition this) os)
    (serdes.core/write-String 12  {:optimize true} (:syntax this) os)
    (serdes.complex/write-repeated serdes.core/write-Int32 11 (:weak-dependency this) os)
    (serdes.complex/write-repeated serdes.core/write-Int32 10 (:public-dependency this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 6 (:service this) os)
    (serdes.core/write-embedded 8 (:options this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FileDescriptorProto"))

(s/def :com.google.protobuf.FileDescriptorProto/package string?)



(s/def :com.google.protobuf.FileDescriptorProto/name string?)

(s/def :com.google.protobuf.FileDescriptorProto/dependency (s/every string?))
(s/def :com.google.protobuf.FileDescriptorProto/edition (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FileDescriptorProto/syntax string?)
(s/def :com.google.protobuf.FileDescriptorProto/weak-dependency (s/every int?))
(s/def :com.google.protobuf.FileDescriptorProto/public-dependency (s/every int?))


(s/def ::FileDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.FileDescriptorProto/package :com.google.protobuf.FileDescriptorProto/name :com.google.protobuf.FileDescriptorProto/dependency :com.google.protobuf.FileDescriptorProto/edition :com.google.protobuf.FileDescriptorProto/syntax :com.google.protobuf.FileDescriptorProto/weak-dependency :com.google.protobuf.FileDescriptorProto/public-dependency ]))
(def FileDescriptorProto-defaults {:package "" :message-type [] :enum-type [] :name "" :extension [] :dependency [] :edition Edition-default :syntax "" :weak-dependency [] :public-dependency [] :service [] })

(defn cis->FileDescriptorProto
  "CodedInputStream to FileDescriptorProto"
  [is]
  (->> (tag-map FileDescriptorProto-defaults
         (fn [tag index]
             (case index
               2 [:package (serdes.core/cis->String is)]
               4 [:message-type (serdes.complex/cis->repeated ecis->DescriptorProto is)]
               9 [:source-code-info (ecis->SourceCodeInfo is)]
               5 [:enum-type (serdes.complex/cis->repeated ecis->EnumDescriptorProto is)]
               1 [:name (serdes.core/cis->String is)]
               7 [:extension (serdes.complex/cis->repeated ecis->FieldDescriptorProto is)]
               3 [:dependency (serdes.complex/cis->repeated serdes.core/cis->String is)]
               14 [:edition (cis->Edition is)]
               12 [:syntax (serdes.core/cis->String is)]
               11 [:weak-dependency (serdes.complex/cis->packablerepeated tag serdes.core/cis->Int32 is)]
               10 [:public-dependency (serdes.complex/cis->packablerepeated tag serdes.core/cis->Int32 is)]
               6 [:service (serdes.complex/cis->repeated ecis->ServiceDescriptorProto is)]
               8 [:options (ecis->FileOptions is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FileDescriptorProto-record)))

(defn ecis->FileDescriptorProto
  "Embedded CodedInputStream to FileDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->FileDescriptorProto is))

(defn new-FileDescriptorProto
  "Creates a new instance from a map, similar to map->FileDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileDescriptorProto-spec init))))]}
  (-> (merge FileDescriptorProto-defaults init)
      (cond-> (some? (get init :message-type)) (update :message-type #(map new-DescriptorProto %)))
      (cond-> (some? (get init :enum-type)) (update :enum-type #(map new-EnumDescriptorProto %)))
      (cond-> (some? (get init :service)) (update :service #(map new-ServiceDescriptorProto %)))
      (cond-> (some? (get init :extension)) (update :extension #(map new-FieldDescriptorProto %)))
      (cond-> (some? (get init :options)) (update :options new-FileOptions))
      (cond-> (some? (get init :source-code-info)) (update :source-code-info new-SourceCodeInfo))
      (map->FileDescriptorProto-record)))

(defn pb->FileDescriptorProto
  "Protobuf to FileDescriptorProto"
  [input]
  (cis->FileDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FileDescriptorProto-meta {:type "com.google.protobuf.FileDescriptorProto" :decoder pb->FileDescriptorProto})

;-----------------------------------------------------------------------------
; DescriptorProto-ReservedRange
;-----------------------------------------------------------------------------
(defrecord DescriptorProto-ReservedRange-record [start end]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:start this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:end this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.DescriptorProto-ReservedRange"))

(s/def :com.google.protobuf.DescriptorProto-ReservedRange/start int?)
(s/def :com.google.protobuf.DescriptorProto-ReservedRange/end int?)
(s/def ::DescriptorProto-ReservedRange-spec (s/keys :opt-un [:com.google.protobuf.DescriptorProto-ReservedRange/start :com.google.protobuf.DescriptorProto-ReservedRange/end ]))
(def DescriptorProto-ReservedRange-defaults {:start 0 :end 0 })

(defn cis->DescriptorProto-ReservedRange
  "CodedInputStream to DescriptorProto-ReservedRange"
  [is]
  (->> (tag-map DescriptorProto-ReservedRange-defaults
         (fn [tag index]
             (case index
               1 [:start (serdes.core/cis->Int32 is)]
               2 [:end (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->DescriptorProto-ReservedRange-record)))

(defn ecis->DescriptorProto-ReservedRange
  "Embedded CodedInputStream to DescriptorProto-ReservedRange"
  [is]
  (serdes.core/cis->embedded cis->DescriptorProto-ReservedRange is))

(defn new-DescriptorProto-ReservedRange
  "Creates a new instance from a map, similar to map->DescriptorProto-ReservedRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-ReservedRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-ReservedRange-spec init))))]}
  (-> (merge DescriptorProto-ReservedRange-defaults init)
      (map->DescriptorProto-ReservedRange-record)))

(defn pb->DescriptorProto-ReservedRange
  "Protobuf to DescriptorProto-ReservedRange"
  [input]
  (cis->DescriptorProto-ReservedRange (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record DescriptorProto-ReservedRange-meta {:type "com.google.protobuf.DescriptorProto-ReservedRange" :decoder pb->DescriptorProto-ReservedRange})

;-----------------------------------------------------------------------------
; Int64Value
;-----------------------------------------------------------------------------
(defrecord Int64Value-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int64 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Int64Value"))

(s/def :com.google.protobuf.Int64Value/value int?)
(s/def ::Int64Value-spec (s/keys :opt-un [:com.google.protobuf.Int64Value/value ]))
(def Int64Value-defaults {:value 0 })

(defn cis->Int64Value
  "CodedInputStream to Int64Value"
  [is]
  (->> (tag-map Int64Value-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Int64 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Int64Value-record)))

(defn ecis->Int64Value
  "Embedded CodedInputStream to Int64Value"
  [is]
  (serdes.core/cis->embedded cis->Int64Value is))

(defn new-Int64Value
  "Creates a new instance from a map, similar to map->Int64Value except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Int64Value-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Int64Value-spec init))))]}
  (-> (merge Int64Value-defaults init)
      (map->Int64Value-record)))

(defn pb->Int64Value
  "Protobuf to Int64Value"
  [input]
  (cis->Int64Value (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Int64Value-meta {:type "com.google.protobuf.Int64Value" :decoder pb->Int64Value})

;-----------------------------------------------------------------------------
; EnumValueOptions
;-----------------------------------------------------------------------------
(defrecord EnumValueOptions-record [deprecated features debug-redact uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 1  {:optimize true} (:deprecated this) os)
    (serdes.core/write-embedded 2 (:features this) os)
    (serdes.core/write-Bool 3  {:optimize true} (:debug-redact this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.EnumValueOptions"))

(s/def :com.google.protobuf.EnumValueOptions/deprecated boolean?)

(s/def :com.google.protobuf.EnumValueOptions/debug-redact boolean?)

(s/def ::EnumValueOptions-spec (s/keys :opt-un [:com.google.protobuf.EnumValueOptions/deprecated :com.google.protobuf.EnumValueOptions/debug-redact ]))
(def EnumValueOptions-defaults {:deprecated false :debug-redact false :uninterpreted-option [] })

(defn cis->EnumValueOptions
  "CodedInputStream to EnumValueOptions"
  [is]
  (->> (tag-map EnumValueOptions-defaults
         (fn [tag index]
             (case index
               1 [:deprecated (serdes.core/cis->Bool is)]
               2 [:features (ecis->FeatureSet is)]
               3 [:debug-redact (serdes.core/cis->Bool is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EnumValueOptions-record)))

(defn ecis->EnumValueOptions
  "Embedded CodedInputStream to EnumValueOptions"
  [is]
  (serdes.core/cis->embedded cis->EnumValueOptions is))

(defn new-EnumValueOptions
  "Creates a new instance from a map, similar to map->EnumValueOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumValueOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumValueOptions-spec init))))]}
  (-> (merge EnumValueOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->EnumValueOptions-record)))

(defn pb->EnumValueOptions
  "Protobuf to EnumValueOptions"
  [input]
  (cis->EnumValueOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EnumValueOptions-meta {:type "com.google.protobuf.EnumValueOptions" :decoder pb->EnumValueOptions})

;-----------------------------------------------------------------------------
; UInt32Value
;-----------------------------------------------------------------------------
(defrecord UInt32Value-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-UInt32 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.UInt32Value"))

(s/def :com.google.protobuf.UInt32Value/value int?)
(s/def ::UInt32Value-spec (s/keys :opt-un [:com.google.protobuf.UInt32Value/value ]))
(def UInt32Value-defaults {:value 0 })

(defn cis->UInt32Value
  "CodedInputStream to UInt32Value"
  [is]
  (->> (tag-map UInt32Value-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->UInt32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->UInt32Value-record)))

(defn ecis->UInt32Value
  "Embedded CodedInputStream to UInt32Value"
  [is]
  (serdes.core/cis->embedded cis->UInt32Value is))

(defn new-UInt32Value
  "Creates a new instance from a map, similar to map->UInt32Value except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UInt32Value-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UInt32Value-spec init))))]}
  (-> (merge UInt32Value-defaults init)
      (map->UInt32Value-record)))

(defn pb->UInt32Value
  "Protobuf to UInt32Value"
  [input]
  (cis->UInt32Value (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record UInt32Value-meta {:type "com.google.protobuf.UInt32Value" :decoder pb->UInt32Value})

;-----------------------------------------------------------------------------
; FeatureSetDefaults-FeatureSetEditionDefault
;-----------------------------------------------------------------------------
(defrecord FeatureSetDefaults-FeatureSetEditionDefault-record [edition features]
  pb/Writer
  (serialize [this os]
    (write-Edition 3  {:optimize true} (:edition this) os)
    (serdes.core/write-embedded 2 (:features this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FeatureSetDefaults-FeatureSetEditionDefault"))

(s/def :com.google.protobuf.FeatureSetDefaults-FeatureSetEditionDefault/edition (s/or :keyword keyword? :int int?))

(s/def ::FeatureSetDefaults-FeatureSetEditionDefault-spec (s/keys :opt-un [:com.google.protobuf.FeatureSetDefaults-FeatureSetEditionDefault/edition ]))
(def FeatureSetDefaults-FeatureSetEditionDefault-defaults {:edition Edition-default })

(defn cis->FeatureSetDefaults-FeatureSetEditionDefault
  "CodedInputStream to FeatureSetDefaults-FeatureSetEditionDefault"
  [is]
  (->> (tag-map FeatureSetDefaults-FeatureSetEditionDefault-defaults
         (fn [tag index]
             (case index
               3 [:edition (cis->Edition is)]
               2 [:features (ecis->FeatureSet is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FeatureSetDefaults-FeatureSetEditionDefault-record)))

(defn ecis->FeatureSetDefaults-FeatureSetEditionDefault
  "Embedded CodedInputStream to FeatureSetDefaults-FeatureSetEditionDefault"
  [is]
  (serdes.core/cis->embedded cis->FeatureSetDefaults-FeatureSetEditionDefault is))

(defn new-FeatureSetDefaults-FeatureSetEditionDefault
  "Creates a new instance from a map, similar to map->FeatureSetDefaults-FeatureSetEditionDefault except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FeatureSetDefaults-FeatureSetEditionDefault-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FeatureSetDefaults-FeatureSetEditionDefault-spec init))))]}
  (-> (merge FeatureSetDefaults-FeatureSetEditionDefault-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (map->FeatureSetDefaults-FeatureSetEditionDefault-record)))

(defn pb->FeatureSetDefaults-FeatureSetEditionDefault
  "Protobuf to FeatureSetDefaults-FeatureSetEditionDefault"
  [input]
  (cis->FeatureSetDefaults-FeatureSetEditionDefault (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FeatureSetDefaults-FeatureSetEditionDefault-meta {:type "com.google.protobuf.FeatureSetDefaults-FeatureSetEditionDefault" :decoder pb->FeatureSetDefaults-FeatureSetEditionDefault})

;-----------------------------------------------------------------------------
; Enum
;-----------------------------------------------------------------------------
(defrecord Enum-record [name enumvalue options source-context syntax edition]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 2 (:enumvalue this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 3 (:options this) os)
    (serdes.core/write-embedded 4 (:source-context this) os)
    (write-Syntax 5  {:optimize true} (:syntax this) os)
    (serdes.core/write-String 6  {:optimize true} (:edition this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Enum"))

(s/def :com.google.protobuf.Enum/name string?)



(s/def :com.google.protobuf.Enum/syntax (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.Enum/edition string?)
(s/def ::Enum-spec (s/keys :opt-un [:com.google.protobuf.Enum/name :com.google.protobuf.Enum/syntax :com.google.protobuf.Enum/edition ]))
(def Enum-defaults {:name "" :enumvalue [] :options [] :syntax Syntax-default :edition "" })

(defn cis->Enum
  "CodedInputStream to Enum"
  [is]
  (->> (tag-map Enum-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]
               2 [:enumvalue (serdes.complex/cis->repeated ecis->EnumValue is)]
               3 [:options (serdes.complex/cis->repeated ecis->Option is)]
               4 [:source-context (ecis->SourceContext is)]
               5 [:syntax (cis->Syntax is)]
               6 [:edition (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Enum-record)))

(defn ecis->Enum
  "Embedded CodedInputStream to Enum"
  [is]
  (serdes.core/cis->embedded cis->Enum is))

(defn new-Enum
  "Creates a new instance from a map, similar to map->Enum except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Enum-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Enum-spec init))))]}
  (-> (merge Enum-defaults init)
      (cond-> (some? (get init :enumvalue)) (update :enumvalue #(map new-EnumValue %)))
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (cond-> (some? (get init :source-context)) (update :source-context new-SourceContext))
      (map->Enum-record)))

(defn pb->Enum
  "Protobuf to Enum"
  [input]
  (cis->Enum (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Enum-meta {:type "com.google.protobuf.Enum" :decoder pb->Enum})

;-----------------------------------------------------------------------------
; Timestamp
;-----------------------------------------------------------------------------
(defrecord Timestamp-record [seconds nanos]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int64 1  {:optimize true} (:seconds this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:nanos this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Timestamp"))

(s/def :com.google.protobuf.Timestamp/seconds int?)
(s/def :com.google.protobuf.Timestamp/nanos int?)
(s/def ::Timestamp-spec (s/keys :opt-un [:com.google.protobuf.Timestamp/seconds :com.google.protobuf.Timestamp/nanos ]))
(def Timestamp-defaults {:seconds 0 :nanos 0 })

(defn cis->Timestamp
  "CodedInputStream to Timestamp"
  [is]
  (->> (tag-map Timestamp-defaults
         (fn [tag index]
             (case index
               1 [:seconds (serdes.core/cis->Int64 is)]
               2 [:nanos (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Timestamp-record)))

(defn ecis->Timestamp
  "Embedded CodedInputStream to Timestamp"
  [is]
  (serdes.core/cis->embedded cis->Timestamp is))

(defn new-Timestamp
  "Creates a new instance from a map, similar to map->Timestamp except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Timestamp-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Timestamp-spec init))))]}
  (-> (merge Timestamp-defaults init)
      (map->Timestamp-record)))

(defn pb->Timestamp
  "Protobuf to Timestamp"
  [input]
  (cis->Timestamp (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Timestamp-meta {:type "com.google.protobuf.Timestamp" :decoder pb->Timestamp})

;-----------------------------------------------------------------------------
; FieldDescriptorProto
;-----------------------------------------------------------------------------
(defrecord FieldDescriptorProto-record [proto3-optional label json-name name oneof-index number type-name type options extendee default-value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 17  {:optimize true} (:proto3-optional this) os)
    (write-FieldDescriptorProto-Label 4  {:optimize true} (:label this) os)
    (serdes.core/write-String 10  {:optimize true} (:json-name this) os)
    (serdes.core/write-String 1  {:optimize true} (:name this) os)
    (serdes.core/write-Int32 9  {:optimize true} (:oneof-index this) os)
    (serdes.core/write-Int32 3  {:optimize true} (:number this) os)
    (serdes.core/write-String 6  {:optimize true} (:type-name this) os)
    (write-FieldDescriptorProto-Type 5  {:optimize true} (:type this) os)
    (serdes.core/write-embedded 8 (:options this) os)
    (serdes.core/write-String 2  {:optimize true} (:extendee this) os)
    (serdes.core/write-String 7  {:optimize true} (:default-value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FieldDescriptorProto"))

(s/def :com.google.protobuf.FieldDescriptorProto/proto3-optional boolean?)
(s/def :com.google.protobuf.FieldDescriptorProto/label (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FieldDescriptorProto/json-name string?)
(s/def :com.google.protobuf.FieldDescriptorProto/name string?)
(s/def :com.google.protobuf.FieldDescriptorProto/oneof-index int?)
(s/def :com.google.protobuf.FieldDescriptorProto/number int?)
(s/def :com.google.protobuf.FieldDescriptorProto/type-name string?)
(s/def :com.google.protobuf.FieldDescriptorProto/type (s/or :keyword keyword? :int int?))

(s/def :com.google.protobuf.FieldDescriptorProto/extendee string?)
(s/def :com.google.protobuf.FieldDescriptorProto/default-value string?)
(s/def ::FieldDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.FieldDescriptorProto/proto3-optional :com.google.protobuf.FieldDescriptorProto/label :com.google.protobuf.FieldDescriptorProto/json-name :com.google.protobuf.FieldDescriptorProto/name :com.google.protobuf.FieldDescriptorProto/oneof-index :com.google.protobuf.FieldDescriptorProto/number :com.google.protobuf.FieldDescriptorProto/type-name :com.google.protobuf.FieldDescriptorProto/type :com.google.protobuf.FieldDescriptorProto/extendee :com.google.protobuf.FieldDescriptorProto/default-value ]))
(def FieldDescriptorProto-defaults {:proto3-optional false :label FieldDescriptorProto-Label-default :json-name "" :name "" :oneof-index 0 :number 0 :type-name "" :type FieldDescriptorProto-Type-default :extendee "" :default-value "" })

(defn cis->FieldDescriptorProto
  "CodedInputStream to FieldDescriptorProto"
  [is]
  (->> (tag-map FieldDescriptorProto-defaults
         (fn [tag index]
             (case index
               17 [:proto3-optional (serdes.core/cis->Bool is)]
               4 [:label (cis->FieldDescriptorProto-Label is)]
               10 [:json-name (serdes.core/cis->String is)]
               1 [:name (serdes.core/cis->String is)]
               9 [:oneof-index (serdes.core/cis->Int32 is)]
               3 [:number (serdes.core/cis->Int32 is)]
               6 [:type-name (serdes.core/cis->String is)]
               5 [:type (cis->FieldDescriptorProto-Type is)]
               8 [:options (ecis->FieldOptions is)]
               2 [:extendee (serdes.core/cis->String is)]
               7 [:default-value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FieldDescriptorProto-record)))

(defn ecis->FieldDescriptorProto
  "Embedded CodedInputStream to FieldDescriptorProto"
  [is]
  (serdes.core/cis->embedded cis->FieldDescriptorProto is))

(defn new-FieldDescriptorProto
  "Creates a new instance from a map, similar to map->FieldDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldDescriptorProto-spec init))))]}
  (-> (merge FieldDescriptorProto-defaults init)
      (cond-> (some? (get init :options)) (update :options new-FieldOptions))
      (map->FieldDescriptorProto-record)))

(defn pb->FieldDescriptorProto
  "Protobuf to FieldDescriptorProto"
  [input]
  (cis->FieldDescriptorProto (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FieldDescriptorProto-meta {:type "com.google.protobuf.FieldDescriptorProto" :decoder pb->FieldDescriptorProto})

;-----------------------------------------------------------------------------
; GeneratedCodeInfo
;-----------------------------------------------------------------------------
(defrecord GeneratedCodeInfo-record [annotation]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:annotation this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.GeneratedCodeInfo"))

(s/def ::GeneratedCodeInfo-spec (s/keys :opt-un []))
(def GeneratedCodeInfo-defaults {:annotation [] })

(defn cis->GeneratedCodeInfo
  "CodedInputStream to GeneratedCodeInfo"
  [is]
  (->> (tag-map GeneratedCodeInfo-defaults
         (fn [tag index]
             (case index
               1 [:annotation (serdes.complex/cis->repeated ecis->GeneratedCodeInfo-Annotation is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->GeneratedCodeInfo-record)))

(defn ecis->GeneratedCodeInfo
  "Embedded CodedInputStream to GeneratedCodeInfo"
  [is]
  (serdes.core/cis->embedded cis->GeneratedCodeInfo is))

(defn new-GeneratedCodeInfo
  "Creates a new instance from a map, similar to map->GeneratedCodeInfo except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GeneratedCodeInfo-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GeneratedCodeInfo-spec init))))]}
  (-> (merge GeneratedCodeInfo-defaults init)
      (cond-> (some? (get init :annotation)) (update :annotation #(map new-GeneratedCodeInfo-Annotation %)))
      (map->GeneratedCodeInfo-record)))

(defn pb->GeneratedCodeInfo
  "Protobuf to GeneratedCodeInfo"
  [input]
  (cis->GeneratedCodeInfo (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record GeneratedCodeInfo-meta {:type "com.google.protobuf.GeneratedCodeInfo" :decoder pb->GeneratedCodeInfo})

;-----------------------------------------------------------------------------
; Field
;-----------------------------------------------------------------------------
(defrecord Field-record [type-url json-name packed name oneof-index number kind cardinality options default-value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 6  {:optimize true} (:type-url this) os)
    (serdes.core/write-String 10  {:optimize true} (:json-name this) os)
    (serdes.core/write-Bool 8  {:optimize true} (:packed this) os)
    (serdes.core/write-String 4  {:optimize true} (:name this) os)
    (serdes.core/write-Int32 7  {:optimize true} (:oneof-index this) os)
    (serdes.core/write-Int32 3  {:optimize true} (:number this) os)
    (write-Field-Kind 1  {:optimize true} (:kind this) os)
    (write-Field-Cardinality 2  {:optimize true} (:cardinality this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 9 (:options this) os)
    (serdes.core/write-String 11  {:optimize true} (:default-value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Field"))

(s/def :com.google.protobuf.Field/type-url string?)
(s/def :com.google.protobuf.Field/json-name string?)
(s/def :com.google.protobuf.Field/packed boolean?)
(s/def :com.google.protobuf.Field/name string?)
(s/def :com.google.protobuf.Field/oneof-index int?)
(s/def :com.google.protobuf.Field/number int?)
(s/def :com.google.protobuf.Field/kind (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.Field/cardinality (s/or :keyword keyword? :int int?))

(s/def :com.google.protobuf.Field/default-value string?)
(s/def ::Field-spec (s/keys :opt-un [:com.google.protobuf.Field/type-url :com.google.protobuf.Field/json-name :com.google.protobuf.Field/packed :com.google.protobuf.Field/name :com.google.protobuf.Field/oneof-index :com.google.protobuf.Field/number :com.google.protobuf.Field/kind :com.google.protobuf.Field/cardinality :com.google.protobuf.Field/default-value ]))
(def Field-defaults {:type-url "" :json-name "" :packed false :name "" :oneof-index 0 :number 0 :kind Field-Kind-default :cardinality Field-Cardinality-default :options [] :default-value "" })

(defn cis->Field
  "CodedInputStream to Field"
  [is]
  (->> (tag-map Field-defaults
         (fn [tag index]
             (case index
               6 [:type-url (serdes.core/cis->String is)]
               10 [:json-name (serdes.core/cis->String is)]
               8 [:packed (serdes.core/cis->Bool is)]
               4 [:name (serdes.core/cis->String is)]
               7 [:oneof-index (serdes.core/cis->Int32 is)]
               3 [:number (serdes.core/cis->Int32 is)]
               1 [:kind (cis->Field-Kind is)]
               2 [:cardinality (cis->Field-Cardinality is)]
               9 [:options (serdes.complex/cis->repeated ecis->Option is)]
               11 [:default-value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Field-record)))

(defn ecis->Field
  "Embedded CodedInputStream to Field"
  [is]
  (serdes.core/cis->embedded cis->Field is))

(defn new-Field
  "Creates a new instance from a map, similar to map->Field except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Field-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Field-spec init))))]}
  (-> (merge Field-defaults init)
      (cond-> (some? (get init :options)) (update :options #(map new-Option %)))
      (map->Field-record)))

(defn pb->Field
  "Protobuf to Field"
  [input]
  (cis->Field (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Field-meta {:type "com.google.protobuf.Field" :decoder pb->Field})

;-----------------------------------------------------------------------------
; FileOptions
;-----------------------------------------------------------------------------
(defrecord FileOptions-record [php-class-prefix java-generic-services java-outer-classname java-multiple-files php-generic-services php-namespace go-package optimize-for java-string-check-utf8 ruby-package java-package csharp-namespace uninterpreted-option php-metadata-namespace deprecated swift-prefix java-generate-equals-and-hash cc-enable-arenas features py-generic-services cc-generic-services objc-class-prefix]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 40  {:optimize true} (:php-class-prefix this) os)
    (serdes.core/write-Bool 17  {:optimize true} (:java-generic-services this) os)
    (serdes.core/write-String 8  {:optimize true} (:java-outer-classname this) os)
    (serdes.core/write-Bool 10  {:optimize true} (:java-multiple-files this) os)
    (serdes.core/write-Bool 42  {:optimize true} (:php-generic-services this) os)
    (serdes.core/write-String 41  {:optimize true} (:php-namespace this) os)
    (serdes.core/write-String 11  {:optimize true} (:go-package this) os)
    (write-FileOptions-OptimizeMode 9  {:optimize true} (:optimize-for this) os)
    (serdes.core/write-Bool 27  {:optimize true} (:java-string-check-utf8 this) os)
    (serdes.core/write-String 45  {:optimize true} (:ruby-package this) os)
    (serdes.core/write-String 1  {:optimize true} (:java-package this) os)
    (serdes.core/write-String 37  {:optimize true} (:csharp-namespace this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os)
    (serdes.core/write-String 44  {:optimize true} (:php-metadata-namespace this) os)
    (serdes.core/write-Bool 23  {:optimize true} (:deprecated this) os)
    (serdes.core/write-String 39  {:optimize true} (:swift-prefix this) os)
    (serdes.core/write-Bool 20  {:optimize true} (:java-generate-equals-and-hash this) os)
    (serdes.core/write-Bool 31  {:optimize true} (:cc-enable-arenas this) os)
    (serdes.core/write-embedded 50 (:features this) os)
    (serdes.core/write-Bool 18  {:optimize true} (:py-generic-services this) os)
    (serdes.core/write-Bool 16  {:optimize true} (:cc-generic-services this) os)
    (serdes.core/write-String 36  {:optimize true} (:objc-class-prefix this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.FileOptions"))

(s/def :com.google.protobuf.FileOptions/php-class-prefix string?)
(s/def :com.google.protobuf.FileOptions/java-generic-services boolean?)
(s/def :com.google.protobuf.FileOptions/java-outer-classname string?)
(s/def :com.google.protobuf.FileOptions/java-multiple-files boolean?)
(s/def :com.google.protobuf.FileOptions/php-generic-services boolean?)
(s/def :com.google.protobuf.FileOptions/php-namespace string?)
(s/def :com.google.protobuf.FileOptions/go-package string?)
(s/def :com.google.protobuf.FileOptions/optimize-for (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.FileOptions/java-string-check-utf8 boolean?)
(s/def :com.google.protobuf.FileOptions/ruby-package string?)
(s/def :com.google.protobuf.FileOptions/java-package string?)
(s/def :com.google.protobuf.FileOptions/csharp-namespace string?)

(s/def :com.google.protobuf.FileOptions/php-metadata-namespace string?)
(s/def :com.google.protobuf.FileOptions/deprecated boolean?)
(s/def :com.google.protobuf.FileOptions/swift-prefix string?)
(s/def :com.google.protobuf.FileOptions/java-generate-equals-and-hash boolean?)
(s/def :com.google.protobuf.FileOptions/cc-enable-arenas boolean?)

(s/def :com.google.protobuf.FileOptions/py-generic-services boolean?)
(s/def :com.google.protobuf.FileOptions/cc-generic-services boolean?)
(s/def :com.google.protobuf.FileOptions/objc-class-prefix string?)
(s/def ::FileOptions-spec (s/keys :opt-un [:com.google.protobuf.FileOptions/php-class-prefix :com.google.protobuf.FileOptions/java-generic-services :com.google.protobuf.FileOptions/java-outer-classname :com.google.protobuf.FileOptions/java-multiple-files :com.google.protobuf.FileOptions/php-generic-services :com.google.protobuf.FileOptions/php-namespace :com.google.protobuf.FileOptions/go-package :com.google.protobuf.FileOptions/optimize-for :com.google.protobuf.FileOptions/java-string-check-utf8 :com.google.protobuf.FileOptions/ruby-package :com.google.protobuf.FileOptions/java-package :com.google.protobuf.FileOptions/csharp-namespace :com.google.protobuf.FileOptions/php-metadata-namespace :com.google.protobuf.FileOptions/deprecated :com.google.protobuf.FileOptions/swift-prefix :com.google.protobuf.FileOptions/java-generate-equals-and-hash :com.google.protobuf.FileOptions/cc-enable-arenas :com.google.protobuf.FileOptions/py-generic-services :com.google.protobuf.FileOptions/cc-generic-services :com.google.protobuf.FileOptions/objc-class-prefix ]))
(def FileOptions-defaults {:php-class-prefix "" :java-generic-services false :java-outer-classname "" :java-multiple-files false :php-generic-services false :php-namespace "" :go-package "" :optimize-for FileOptions-OptimizeMode-default :java-string-check-utf8 false :ruby-package "" :java-package "" :csharp-namespace "" :uninterpreted-option [] :php-metadata-namespace "" :deprecated false :swift-prefix "" :java-generate-equals-and-hash false :cc-enable-arenas false :py-generic-services false :cc-generic-services false :objc-class-prefix "" })

(defn cis->FileOptions
  "CodedInputStream to FileOptions"
  [is]
  (->> (tag-map FileOptions-defaults
         (fn [tag index]
             (case index
               40 [:php-class-prefix (serdes.core/cis->String is)]
               17 [:java-generic-services (serdes.core/cis->Bool is)]
               8 [:java-outer-classname (serdes.core/cis->String is)]
               10 [:java-multiple-files (serdes.core/cis->Bool is)]
               42 [:php-generic-services (serdes.core/cis->Bool is)]
               41 [:php-namespace (serdes.core/cis->String is)]
               11 [:go-package (serdes.core/cis->String is)]
               9 [:optimize-for (cis->FileOptions-OptimizeMode is)]
               27 [:java-string-check-utf8 (serdes.core/cis->Bool is)]
               45 [:ruby-package (serdes.core/cis->String is)]
               1 [:java-package (serdes.core/cis->String is)]
               37 [:csharp-namespace (serdes.core/cis->String is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]
               44 [:php-metadata-namespace (serdes.core/cis->String is)]
               23 [:deprecated (serdes.core/cis->Bool is)]
               39 [:swift-prefix (serdes.core/cis->String is)]
               20 [:java-generate-equals-and-hash (serdes.core/cis->Bool is)]
               31 [:cc-enable-arenas (serdes.core/cis->Bool is)]
               50 [:features (ecis->FeatureSet is)]
               18 [:py-generic-services (serdes.core/cis->Bool is)]
               16 [:cc-generic-services (serdes.core/cis->Bool is)]
               36 [:objc-class-prefix (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FileOptions-record)))

(defn ecis->FileOptions
  "Embedded CodedInputStream to FileOptions"
  [is]
  (serdes.core/cis->embedded cis->FileOptions is))

(defn new-FileOptions
  "Creates a new instance from a map, similar to map->FileOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileOptions-spec init))))]}
  (-> (merge FileOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->FileOptions-record)))

(defn pb->FileOptions
  "Protobuf to FileOptions"
  [input]
  (cis->FileOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FileOptions-meta {:type "com.google.protobuf.FileOptions" :decoder pb->FileOptions})

;-----------------------------------------------------------------------------
; SourceCodeInfo
;-----------------------------------------------------------------------------
(defrecord SourceCodeInfo-record [location]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:location this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.SourceCodeInfo"))

(s/def ::SourceCodeInfo-spec (s/keys :opt-un []))
(def SourceCodeInfo-defaults {:location [] })

(defn cis->SourceCodeInfo
  "CodedInputStream to SourceCodeInfo"
  [is]
  (->> (tag-map SourceCodeInfo-defaults
         (fn [tag index]
             (case index
               1 [:location (serdes.complex/cis->repeated ecis->SourceCodeInfo-Location is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->SourceCodeInfo-record)))

(defn ecis->SourceCodeInfo
  "Embedded CodedInputStream to SourceCodeInfo"
  [is]
  (serdes.core/cis->embedded cis->SourceCodeInfo is))

(defn new-SourceCodeInfo
  "Creates a new instance from a map, similar to map->SourceCodeInfo except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SourceCodeInfo-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SourceCodeInfo-spec init))))]}
  (-> (merge SourceCodeInfo-defaults init)
      (cond-> (some? (get init :location)) (update :location #(map new-SourceCodeInfo-Location %)))
      (map->SourceCodeInfo-record)))

(defn pb->SourceCodeInfo
  "Protobuf to SourceCodeInfo"
  [input]
  (cis->SourceCodeInfo (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record SourceCodeInfo-meta {:type "com.google.protobuf.SourceCodeInfo" :decoder pb->SourceCodeInfo})

;-----------------------------------------------------------------------------
; ServiceOptions
;-----------------------------------------------------------------------------
(defrecord ServiceOptions-record [features deprecated uninterpreted-option]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 34 (:features this) os)
    (serdes.core/write-Bool 33  {:optimize true} (:deprecated this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 999 (:uninterpreted-option this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.ServiceOptions"))

(s/def :com.google.protobuf.ServiceOptions/deprecated boolean?)

(s/def ::ServiceOptions-spec (s/keys :opt-un [:com.google.protobuf.ServiceOptions/deprecated ]))
(def ServiceOptions-defaults {:deprecated false :uninterpreted-option [] })

(defn cis->ServiceOptions
  "CodedInputStream to ServiceOptions"
  [is]
  (->> (tag-map ServiceOptions-defaults
         (fn [tag index]
             (case index
               34 [:features (ecis->FeatureSet is)]
               33 [:deprecated (serdes.core/cis->Bool is)]
               999 [:uninterpreted-option (serdes.complex/cis->repeated ecis->UninterpretedOption is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ServiceOptions-record)))

(defn ecis->ServiceOptions
  "Embedded CodedInputStream to ServiceOptions"
  [is]
  (serdes.core/cis->embedded cis->ServiceOptions is))

(defn new-ServiceOptions
  "Creates a new instance from a map, similar to map->ServiceOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ServiceOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ServiceOptions-spec init))))]}
  (-> (merge ServiceOptions-defaults init)
      (cond-> (some? (get init :features)) (update :features new-FeatureSet))
      (cond-> (some? (get init :uninterpreted-option)) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->ServiceOptions-record)))

(defn pb->ServiceOptions
  "Protobuf to ServiceOptions"
  [input]
  (cis->ServiceOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ServiceOptions-meta {:type "com.google.protobuf.ServiceOptions" :decoder pb->ServiceOptions})

;-----------------------------------------------------------------------------
; Int32Value
;-----------------------------------------------------------------------------
(defrecord Int32Value-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.Int32Value"))

(s/def :com.google.protobuf.Int32Value/value int?)
(s/def ::Int32Value-spec (s/keys :opt-un [:com.google.protobuf.Int32Value/value ]))
(def Int32Value-defaults {:value 0 })

(defn cis->Int32Value
  "CodedInputStream to Int32Value"
  [is]
  (->> (tag-map Int32Value-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Int32Value-record)))

(defn ecis->Int32Value
  "Embedded CodedInputStream to Int32Value"
  [is]
  (serdes.core/cis->embedded cis->Int32Value is))

(defn new-Int32Value
  "Creates a new instance from a map, similar to map->Int32Value except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Int32Value-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Int32Value-spec init))))]}
  (-> (merge Int32Value-defaults init)
      (map->Int32Value-record)))

(defn pb->Int32Value
  "Protobuf to Int32Value"
  [input]
  (cis->Int32Value (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Int32Value-meta {:type "com.google.protobuf.Int32Value" :decoder pb->Int32Value})

;-----------------------------------------------------------------------------
; StringValue
;-----------------------------------------------------------------------------
(defrecord StringValue-record [value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "com.google.protobuf.StringValue"))

(s/def :com.google.protobuf.StringValue/value string?)
(s/def ::StringValue-spec (s/keys :opt-un [:com.google.protobuf.StringValue/value ]))
(def StringValue-defaults {:value "" })

(defn cis->StringValue
  "CodedInputStream to StringValue"
  [is]
  (->> (tag-map StringValue-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->StringValue-record)))

(defn ecis->StringValue
  "Embedded CodedInputStream to StringValue"
  [is]
  (serdes.core/cis->embedded cis->StringValue is))

(defn new-StringValue
  "Creates a new instance from a map, similar to map->StringValue except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::StringValue-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::StringValue-spec init))))]}
  (-> (merge StringValue-defaults init)
      (map->StringValue-record)))

(defn pb->StringValue
  "Protobuf to StringValue"
  [input]
  (cis->StringValue (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record StringValue-meta {:type "com.google.protobuf.StringValue" :decoder pb->StringValue})

